{"version":3,"sources":["components/chat/helpers.ts","components/list/resultListItem/ResultListItem.tsx","components/chat/Chat.tsx","store/actions/user/userActionTypes.ts","api/index.ts","utils/errorMessage.ts","store/actions/message/messageActionTypes.ts","store/actions/socket/socketsActionsTypes.ts","store/actions/chat/chatActionTypes.ts","store/actions/message/messageActions.ts","store/actions/chat/chatActions.ts","store/actions/notification/notificationActionTypes.ts","store/actions/notification/notificationActions.ts","api/sockets.ts","store/actions/post/postActionTypes.ts","store/reducers/postReducer.ts","store/actions/search/searchActionTypes.ts","store/actions/socket/socketActions.ts","store/actions/upload/uploadActionTypes.ts","store/reducers/userReducer.ts","store/reducers/rootReducer.ts","store/reducers/uploadReducer.ts","store/reducers/searchReducer.ts","store/reducers/chatReducer.ts","store/reducers/messageReducer.ts","store/reducers/notificationReducer.ts","store/reducers/socketReducer.ts","store/store.ts","store/actions/user/userActions.ts","components/navBar/NavBar.tsx","components/notification/Notification.tsx","components/notification/helper.ts","components/titleBar/TitleBar.tsx","layout/MainLayout.tsx","store/actions/post/postActions.ts","components/image/ProfileImage.tsx","components/postForm/PostForm.tsx","components/fallbackMessage/FallbackMessage.tsx","components/loadingSpinner/LoadSpinner.tsx","components/modals/ModalLayout.tsx","components/modals/PostReplyModal.tsx","components/modals/PostDeleteModal.tsx","components/modals/PinPostModal.tsx","components/post/Post.tsx","utils/timeDifference.ts","components/post/PostList.tsx","components/meta/Meta.tsx","components/modals/ImageUploadModal.tsx","pages/search/SearchPage.tsx","pages/messages/newMessage/NewMessagePage.tsx","pages/home/HomePage.tsx","pages/login/LoginPage.tsx","pages/login/RegisterPage.tsx","pages/post/PostPage.tsx","components/tabs/Tabs.tsx","store/actions/upload/uploadActions.ts","components/image/ProfilePageProfile.tsx","components/image/CoverPhoto.tsx","pages/profile/ProfilePage.tsx","pages/profile/MyProfilePage.tsx","pages/profile/OthersProfilePage.tsx","components/user/User.tsx","components/user/UserList.tsx","pages/profile/followers-following/FollowersFollowingPage.tsx","store/actions/search/searchActions.ts","components/chat/ChatList.tsx","pages/messages/inbox/InboxPage.tsx","components/chatBox/ChatMessage.tsx","components/chatBox/helpers.ts","components/chatBox/ChatBoxMessages.tsx","components/modals/ChatNameModal.tsx","components/notification/NotificationList.tsx","routes/pages.ts","pages/messages/chat/ChatPage.tsx","pages/notification/NotificationPage.tsx","routes/Routes.tsx","App.tsx","index.tsx"],"names":["getOtherChatUsers","users","loggedInUserId","length","filter","u","_id","getChatName","chatData","chatName","map","firstName","lastName","join","ResultListItem","imageUrls","linkTo","header","subText","listText","containerClassName","imageClassName","onItemClick","to","className","onClick","src","i","alt","Chat","chat","latestMessage","user","useSelector","state","loggedInUserInfo","otherChatUsers","images","firstImage","profilePic","push","getOtherChatImages","groupChatClass","chatLatestMessage","latestMessageContent","sender","content","getLatestMessage","readBy","includes","USER_AUTHENTICATE_LOADING","USER_AUTHENTICATE_FAIL","USER_AUTHENTICATE_SUCCESS","LOGGED_IN_USER_INFO_LOADING","LOGGED_IN_USER_INFO_FAIL","LOGGED_IN_USER_INFO_SUCCESS","UPDATE_AUTH_USER","USER_LOGOUT","USER_INFO_LOADING","USER_INFO_FAIL","USER_INFO_SUCCESS","USER_INFO_UPDATE_FOLLOWERS","USER_FOLLOW_LOADING","USER_FOLLOW_FAIL","USER_FOLLOW_SUCCESS","USER_FOLLOWERS_LOADING","USER_FOLLOWERS_FAIL","USER_FOLLOWERS_SUCCESS","USER_FOLLOWING_LIST_LOADING","USER_FOLLOWING_LIST_FAIL","USER_FOLLOWING_LIST_SUCCESS","BASE_URL","API","axios","create","baseURL","interceptors","request","use","req","userInfoJSON","localStorage","getItem","headers","Authorization","JSON","parse","token","formDataConfig","getUserInfoById","id","get","followUser","put","getUserFollowers","getUserFollowng","searchUsers","keywords","fetchUserPosts","userId","fetchUserPostReplies","fetchPostDetails","createPost","data","post","retweetPost","likePost","updatePost","body","deletePost","delete","fetchChatDetails","createChat","updateChat","name","sendMessage","chatId","getMessages","markAllMessagesAsRead","uploadProfilePicture","formData","uploadCoverPhoto","getApiErrorMessage","err","message","response","MESSAGE_LIST_LOADING","MESSAGE_LIST_SUCCESS","MESSAGE_LIST_FAIL","MESSAGE_SEND_LOADING","MESSAGE_SEND_SUCCESS","MESSAGE_SEND_FAIL","MESSAGE_ADD_TO_LIST","MESSAGE_MARK_AS_READ_LOADING","MESSAGE_MARK_AS_READ_SUCCESS","MESSAGE_MARK_AS_READ_FAIL","MESSAGE_MARK_AS_READ_RESET","SOCKET_CONNECT","SOCKET_CHAT_ROOM_TYPING","SOCKET_CHAT_ROOM_TYPING_RESET","CHAT_LIST_LOADING","CHAT_LIST_SUCCESS","CHAT_LIST_FAIL","CHAT_UNREAD_LIST_LOADING","CHAT_UNREAD_LIST_SUCCESS","CHAT_UNREAD_LIST_FAIL","CHAT_DETAILS_LOADING","CHAT_DETAILS_SUCCESS","CHAT_DETAILS_FAIL","CHAT_CREATE_LOADING","CHAT_CREATE_SUCCESS","CHAT_CREATE_FAIL","CHAT_UPDATE_LOADING","CHAT_UPDATE_SUCCESS","CHAT_UPDATE_FAIL","markMessagesAsRead","dispatch","a","type","api","payload","listUnreadChats","NOTIFICATION_LIST_LOADING","NOTIFICATION_LIST_SUCCESS","NOTIFICATION_LIST_FAIL","NOTIFICATION_UNREAD_LIST_LOADING","NOTIFICATION_UNREAD_LIST_SUCCESS","NOTIFICATION_UNREAD_LIST_FAIL","NOTIFICATION_LATEST_LOADING","NOTIFICATION_LATEST_SUCCESS","NOTIFICATION_LATEST_FAIL","NOTIFICATION_MARK_AS_OPENED_LOADING","NOTIFICATION_MARK_AS_OPENED_SUCCESS","NOTIFICATION_MARK_AS_OPENED_FAIL","NOTIFICATION_MARK_AS_OPENED_RESET","NOTIFICATION_POPUP_REMOVE","listUnreadNotifications","markNotificationsAsOpened","notificationId","callback","window","location","reload","socket","io","connectSocket","emit","on","isConnected","newMessage","document","pathname","console","log","messageActions","chatActions","POST_CREATE_LOADING","POST_CREATE_SUCCESS","POST_CREATE_FAIL","POST_LIST_LOADING","POST_LIST_SUCCESS","POST_LIST_FAIL","POST_LIST_UPDATE_ONLIKE","POST_DETAILS_LOADING","POST_DETAILS_SUCCESS","POST_DETAILS_FAIL","POST_UPDATE_LOADING","POST_UPDATE_SUCCESS","POST_UPDATE_FAIL","POST_LIKE_LOADING","POST_LIKE_SUCCESS","POST_LIKE_FAIL","POST_RETWEET","POST_DELETE_LOADING","POST_DELETE_SUCCESS","POST_DELETE_FAIL","updatePostField","postsArray","newPost","retweetId","field","postToBeUpdated_id","foundIndex","findIndex","p","updatedPosts","retweetData","posts","lastTypingTime","SEARCH_LOADING","SEARCH_POSTS_SUCCESS","SEARCH_USERS_SUCCESS","SEARCH_RESET","PROFILE_PIC_UPLOAD_LOADING","PROFILE_PIC_UPLOAD_SUCCESS","PROFILE_PIC_UPLOAD_FAIL","defaultState","loading","defaultLoginState","RootReducer","combineReducers","userAuth","action","error","userInfo","newFollowerId","index","followers","indexOf","updatedUser","undefined","splice","userFollow","success","userFollowers","userFollowingList","profilePicUpload","postList","unshift","postDetails","postCreate","postLike","postDelete","postUpdate","search","chatList","chats","chatDetails","chatCreate","chatUpdate","chatUnreadList","totalCount","messageList","messageIndex","messages","updatedMessages","tempId","forEach","m","messageSend","failedTextMessage","messageMark","notificationList","notifications","notificationUnreadList","notificationPopupList","newList","shift","notificationMark","socketConnect","socketChatRoom","isTyping","room","initialState","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","typing","emitStopTypingSocket","emitNewMessageSocket","emitNewNotificationSocket","getState","authenticateUser","loginDetails","resData","setItem","stringify","getLoggedInUserInfo","updateUserInfo","NavBar","useDispatch","notificationCount","messageCount","removeItem","Notification","notification","userFrom","opened","notificationText","notificationType","alert","userFromName","text","getNotificationText","url","entityId","getNotificationUrl","history","useHistory","e","preventDefault","notificationActions","TitleBar","title","headerBtnIcon","link","onBtnClick","MainLayout","children","pageTitle","useEffect","setTimeout","n","listPosts","isReply","res","postData","replyTo","postedBy","ProfileImage","uri","PostForm","imageUrl","creating","createSuccess","useState","setPost","placeholder","value","onChange","target","disabled","trim","postActions","FallBackMessage","LoadingSpinner","ModalLayout","show","actionBtnText","cancelBtnText","loadingSave","submitHandler","handleClose","Modal","onHide","stopPropagation","Header","closeButton","Title","Body","Footer","Button","variant","defaultProps","PostReplyModal","postId","setShow","replyText","setReplyText","find","postCreateState","loadingCreate","errorCreate","PinPostModal","isPinned","pinned","Post","largeFont","isRetweet","retweetedBy","userName","replyingTo","originalPost","createdAt","likes","retweetUsers","isLoggedInUserPost","displayName","timeStamp","current","previous","msPerMinute","msPerHour","msPerDay","msPerMonth","msPerYear","elapsed","getTime","Math","round","timeDifference","Date","likeButtonActiveClass","retweetButtonActiveClass","largeFontClass","numOfLikes","numOfRetweets","PostList","Meta","description","Helmet","cropper","timer","HomePage","postListState","successDelete","successUpdate","LoginPage","logUserName","setLogUserName","logPassword","setLogPassword","userAuthState","onSubmit","userActions","email","password","required","RegisterPage","setFirstName","setLastName","setUserName","setEmail","setPassword","confirmedPassword","setConfirmedPassword","ViewPostPage","match","params","postDetalsState","clickedPost","documentTitle","replies","Tabs","handleSelect","tab","active","uploadProfilePic","ImageUploadModal","showModal","aspectRatio","dispatchAction","uploadActions","formDataName","modalTitle","closeModal","setImageUrl","imageElementRef","React","createRef","destroy","Cropper","background","canvas","getCroppedCanvas","toBlob","blob","FormData","append","files","file","URL","createObjectURL","ref","ProfilePageProfile","profileUser","setShowModal","CoverPhoto","coverPhoto","ProfilePage","activeTabId","setActiveTabId","following","loggedInUser","pinnedPost","isFollowing","followBtnText","followBtnClass","followingCount","followersCount","TABS","MyProfilePage","loggedInUserInfoState","OthersProfilePage","profileId","userInfoState","loggedInUserName","User","showFollowBtn","onSelectUser","fullName","showBtn","UserList","showBtns","selectUserHandler","FollowersFollowingPage","selectedTab","tabname","userFollowersState","loadingFollowers","errorFollowers","userFollowingState","loadingFollowing","errorFollowing","displayedUsers","displayedLoading","displayedError","searchObj","searchingFor","keyword","SearchPage","searchText","setSearchText","showSearchResults","setShowSearchResults","searchType","useMemo","searchState","some","t","clearTimeout","searchActions","ChatList","InboxPage","chatListState","NewMessagePage","selectedUsers","setSelectedUsers","textInputRef","useRef","chatCreateState","selectableUsers","usr","htmlFor","onKeyDown","inputIsEmpty","key","updatedSelctedUsers","pop","prev","focus","ChatMessage","lastMessage","nextMessage","senderId","isMsgMine","isMsgFirstInchain","currentSenderId","isFirstInMsgChain","isMsgLastInChain","isLastInMsgChain","liClassName","ChatBoxMessages","lastMessageRef","messageListState","scrollIntoView","behavior","style","height","ChatNameModal","setChatName","NotificationList","pages","exact","path","component","layout","protect","PostPage","textMessage","setTextMessage","showTypingDots","setShowTypingDots","chatDetailsState","socketChatRoomState","joinChatRoomSocket","messagesActions","uniqueDate","now","toString","messageSubmitHandler","slice","getTitleBarImages","remainingImagesCount","updateTypingSocket","shiftKey","notificationListState","Routes","successMessageMark","isAuth","setupSocket","page","render","props","from","defaults","withCredentials","App","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.c04a5ae0.chunk.js","sourcesContent":["import { ChatInterface } from '../../store/actions/chat/chatActionTypes';\r\nimport { MessageInterface } from '../../store/actions/message/messageActionTypes';\r\nimport { UserType } from '../../store/actions/user/userActionTypes';\r\n\r\n// UTILS FUNCTIONS\r\nexport const getOtherChatUsers = (\r\n  users: UserType[],\r\n  loggedInUserId: string\r\n) => {\r\n  if (users.length === 1) return users;\r\n\r\n  return users.filter((u) => u._id !== loggedInUserId);\r\n};\r\n\r\nexport const getChatName = (\r\n  chatData: ChatInterface,\r\n  loggedInUserId: string\r\n): string => {\r\n  let chatName = chatData.chatName;\r\n\r\n  if (!chatName) {\r\n    const otherChatUsers = getOtherChatUsers(chatData.users, loggedInUserId);\r\n    const namesArray = otherChatUsers.map(\r\n      (u) => u.firstName + ' ' + u.lastName\r\n    );\r\n    chatName = namesArray.join(', ');\r\n  }\r\n\r\n  return chatName;\r\n};\r\n\r\nexport const getOtherChatImages = (otherChatUsers: UserType[]) => {\r\n  let images: string[] = [];\r\n  const firstImage = otherChatUsers[0].profilePic;\r\n  images.push(firstImage);\r\n\r\n  if (otherChatUsers.length > 1) {\r\n    images.push(otherChatUsers[1].profilePic);\r\n  }\r\n\r\n  return images;\r\n};\r\n\r\nexport const getLatestMessage = (latestMessage?: MessageInterface) => {\r\n  if (latestMessage) {\r\n    const sender = latestMessage.sender;\r\n    return `${sender.firstName} ${sender.lastName}: ${latestMessage.content}`;\r\n  }\r\n\r\n  return 'New chat';\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './resultList.scss';\r\n\r\ninterface ResultListProps {\r\n  imageUrls?: string[];\r\n  linkTo?: string;\r\n  header?: string;\r\n  subText?: string;\r\n  listText?: string;\r\n  containerClassName?: 'active' | '';\r\n  imageClassName?: string;\r\n  onItemClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\r\n}\r\n\r\nconst ResultListItem: React.FC<ResultListProps> = ({\r\n  imageUrls,\r\n  linkTo,\r\n  header,\r\n  subText,\r\n  listText,\r\n  containerClassName,\r\n  imageClassName,\r\n  onItemClick,\r\n}) => {\r\n  return (\r\n    <Link\r\n      to={linkTo || '#'}\r\n      className={`resultListItem ${containerClassName || ''}`}\r\n      onClick={onItemClick}\r\n    >\r\n      {imageUrls && (\r\n        <div className={`resultsImageContainer ${imageClassName || ''}`}>\r\n          {imageUrls.map((src, i) => (\r\n            <img key={i} src={src} alt='Chat Pic' />\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <div className='resultsDetailsContainer ellipsis'>\r\n        {header && <span className='heading ellipsis'>{header}</span>}\r\n        {listText && <span className='ellipsis'>{listText}</span>}\r\n        {subText && <span className='subText ellipsis'>{subText}</span>}\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default ResultListItem;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { ChatInterface } from '../../store/actions/chat/chatActionTypes';\r\nimport {\r\n  getOtherChatUsers,\r\n  getChatName,\r\n  getOtherChatImages,\r\n  getLatestMessage,\r\n} from './helpers';\r\n\r\nimport { RootStore } from '../../store/store';\r\n\r\nimport ResultListItem from '../list/resultListItem/ResultListItem';\r\nimport { MessageInterface } from '../../store/actions/message/messageActionTypes';\r\n\r\ninterface chatProps {\r\n  chat: ChatInterface;\r\n  latestMessage?: MessageInterface;\r\n}\r\n\r\nconst Chat: React.FC<chatProps> = ({ chat, latestMessage }) => {\r\n  const state = useSelector((state: RootStore) => state);\r\n\r\n  const loggedInUserState = state.loggedInUserInfo;\r\n  const { user } = loggedInUserState;\r\n\r\n  if (!user) {\r\n    return <p>Not Authenticated</p>;\r\n  }\r\n\r\n  const loggedInUserId = user._id;\r\n\r\n  const otherChatUsers = getOtherChatUsers(chat.users, loggedInUserId);\r\n  const chatName = getChatName(chat, loggedInUserId);\r\n  const images = getOtherChatImages(otherChatUsers);\r\n  const groupChatClass = images.length > 1 ? 'groupChatImage' : '';\r\n\r\n  const chatLatestMessage = latestMessage || chat.latestMessage;\r\n\r\n  const latestMessageContent = getLatestMessage(chatLatestMessage);\r\n\r\n  const isChatViewed =\r\n    !chatLatestMessage || chatLatestMessage.readBy.includes(loggedInUserId);\r\n  const containerClassName = isChatViewed ? '' : 'active';\r\n\r\n  return (\r\n    <ResultListItem\r\n      linkTo={`/message/${chat._id}`}\r\n      imageUrls={images}\r\n      header={chatName}\r\n      subText={latestMessageContent}\r\n      imageClassName={groupChatClass}\r\n      containerClassName={containerClassName}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","export const USER_AUTHENTICATE_LOADING = 'USER_AUTHENTICATE_LOADING';\r\nexport const USER_AUTHENTICATE_FAIL = 'USER_AUTHENTICATE_FAIL';\r\nexport const USER_AUTHENTICATE_SUCCESS = 'USER_AUTHENTICATE_SUCCESS';\r\n\r\nexport const LOGGED_IN_USER_INFO_LOADING = 'LOGGED_IN_USER_INFO_LOADING';\r\nexport const LOGGED_IN_USER_INFO_FAIL = 'LOGGED_IN_USER_INFO_FAIL';\r\nexport const LOGGED_IN_USER_INFO_SUCCESS = 'LOGGED_IN_USER_INFO_SUCCESS';\r\n\r\nexport const UPDATE_AUTH_USER = 'UPDATE_AUTH_USER';\r\n\r\nexport const USER_LOGOUT = 'USER_LOGOUT';\r\n\r\nexport const USER_INFO_LOADING = 'USER_INFO_LOADING';\r\nexport const USER_INFO_FAIL = 'USER_INFO_FAIL';\r\nexport const USER_INFO_SUCCESS = 'USER_INFO_SUCCESS';\r\n\r\nexport const USER_INFO_UPDATE_FOLLOWERS = 'USER_INFO_UPDATE_FOLLOWERS';\r\n\r\nexport const USER_FOLLOW_LOADING = 'USER_FOLLOW_LOADING';\r\nexport const USER_FOLLOW_FAIL = 'USER_FOLLOW_FAIL';\r\nexport const USER_FOLLOW_SUCCESS = 'USER_FOLLOW_SUCCESS';\r\n\r\nexport const USER_FOLLOWERS_LOADING = 'USER_FOLLOWERS_LOADING';\r\nexport const USER_FOLLOWERS_FAIL = 'USER_FOLLOWERS_FAIL';\r\nexport const USER_FOLLOWERS_SUCCESS = 'USER_FOLLOWERS_SUCCESS';\r\n\r\nexport const USER_FOLLOWING_LIST_LOADING = 'USER_FOLLOWING_LIST_LOADING';\r\nexport const USER_FOLLOWING_LIST_FAIL = 'USER_FOLLOWING_LIST_FAIL';\r\nexport const USER_FOLLOWING_LIST_SUCCESS = 'USER_FOLLOWING_LIST_SUCCESS';\r\n\r\nexport type RegisterUserDataType = {\r\n  firstName: string;\r\n  lastName: string;\r\n  userName: string;\r\n  email: string;\r\n  password: string;\r\n};\r\n\r\nexport type LoginUserDataType = {\r\n  email: string;\r\n  password: string;\r\n};\r\n\r\nexport interface UserType {\r\n  _id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  userName: string;\r\n  profilePic: string;\r\n  coverPhoto: string;\r\n  email: string;\r\n  following: string[];\r\n  followers: string[];\r\n}\r\n\r\nexport interface LoggedInUserI extends UserType {\r\n  token: string;\r\n}\r\n\r\n// USER AUTHENTICATE\r\nexport interface UserAuthenticateLoading {\r\n  type: typeof USER_AUTHENTICATE_LOADING;\r\n}\r\n\r\nexport interface UserAuthenticateFail {\r\n  type: typeof USER_AUTHENTICATE_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport interface UserAuthenticateSuccess {\r\n  type: typeof USER_AUTHENTICATE_SUCCESS;\r\n  payload: LoggedInUserI;\r\n}\r\n\r\n//LOGGED IN USER INFO\r\nexport interface LoggedInUserInfoLoading {\r\n  type: typeof LOGGED_IN_USER_INFO_LOADING;\r\n}\r\n\r\nexport interface LoggedInUserInfoFail {\r\n  type: typeof LOGGED_IN_USER_INFO_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport interface LoggedInUserInfoSuccess {\r\n  type: typeof LOGGED_IN_USER_INFO_SUCCESS;\r\n  payload: UserType;\r\n}\r\n\r\n// UPDATE AUTH USER\r\nexport interface UpdateAuthUser {\r\n  type: typeof UPDATE_AUTH_USER;\r\n  payload: UserType;\r\n}\r\n\r\n// USER_LOGOUT\r\nexport interface UserLogout {\r\n  type: typeof USER_LOGOUT;\r\n}\r\n\r\n// USER INFO BY ID\r\nexport interface UserInfoLoading {\r\n  type: typeof USER_INFO_LOADING;\r\n}\r\n\r\nexport interface UserInfoFail {\r\n  type: typeof USER_INFO_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport interface UserInfoSuccess {\r\n  type: typeof USER_INFO_SUCCESS;\r\n  payload: UserType;\r\n}\r\n\r\n// UPDATE USER INFO\r\nexport interface UserInfoUpdateFollowers {\r\n  type: typeof USER_INFO_UPDATE_FOLLOWERS;\r\n  payload: string;\r\n}\r\n\r\n// FOLLOW USER\r\nexport interface UserFollowLoading {\r\n  type: typeof USER_FOLLOW_LOADING;\r\n}\r\n\r\nexport interface UserFollowSuccess {\r\n  type: typeof USER_FOLLOW_SUCCESS;\r\n  payload: string;\r\n}\r\n\r\nexport interface UserFollowFail {\r\n  type: typeof USER_FOLLOW_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// USER FOLLOWERS\r\nexport interface UserFollowersLoading {\r\n  type: typeof USER_FOLLOWERS_LOADING;\r\n}\r\n\r\nexport interface UserFollowersSuccess {\r\n  type: typeof USER_FOLLOWERS_SUCCESS;\r\n  payload: UserType[];\r\n}\r\n\r\nexport interface UserFollowersFail {\r\n  type: typeof USER_FOLLOWERS_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// USER FOLLOWING LIST\r\nexport interface UserFollowingListLoading {\r\n  type: typeof USER_FOLLOWING_LIST_LOADING;\r\n}\r\n\r\nexport interface UserFollowingListSuccess {\r\n  type: typeof USER_FOLLOWING_LIST_SUCCESS;\r\n  payload: UserType[];\r\n}\r\n\r\nexport interface UserFollowingListFail {\r\n  type: typeof USER_FOLLOWING_LIST_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// DISPATCH TYPES\r\nexport type UserAuthenticateDispatchTypes =\r\n  | UserAuthenticateLoading\r\n  | UserAuthenticateFail\r\n  | UserAuthenticateSuccess\r\n  | LoggedInUserInfoSuccess\r\n  | UpdateAuthUser\r\n  | UserLogout;\r\n\r\nexport type LoggedInUserInfoDispatchTypes =\r\n  | LoggedInUserInfoLoading\r\n  | LoggedInUserInfoFail\r\n  | LoggedInUserInfoSuccess\r\n  | UpdateAuthUser\r\n  | UserLogout;\r\n\r\nexport type UserInfoDispatchTypes =\r\n  | UserInfoLoading\r\n  | UserInfoFail\r\n  | UserInfoSuccess\r\n  | UserLogout\r\n  | UserInfoUpdateFollowers;\r\n\r\nexport type UserFollowDispatchTypes =\r\n  | UserFollowLoading\r\n  | UserFollowFail\r\n  | UserFollowSuccess\r\n  | UserInfoUpdateFollowers\r\n  | UpdateAuthUser\r\n  | LoggedInUserInfoSuccess;\r\n\r\nexport type UserFollowersDispatchTypes =\r\n  | UserFollowersLoading\r\n  | UserFollowersFail\r\n  | UserFollowersSuccess;\r\n\r\nexport type UserFollowingListDispatchTypes =\r\n  | UserFollowingListLoading\r\n  | UserFollowingListFail\r\n  | UserFollowingListSuccess;\r\n\r\nexport type UserLogoutDispatchTypes = UserLogout;\r\n","// ------------------------------ IMPORTS ------------------------------\r\nimport axios, { AxiosRequestConfig } from 'axios';\r\nimport {\r\n  RegisterUserDataType,\r\n  UserType,\r\n} from '../store/actions/user/userActionTypes';\r\nimport { PostInterface } from '../store/actions/post/postActionTypes';\r\n\r\n// ------------------------------ AXIOS CONFIGURATION ---------------------\r\n\r\nexport const BASE_URL =\r\n  process.env.NODE_ENV === 'production'\r\n    ? 'https://tweethouse.online'\r\n    : 'http://localhost:5000';\r\n\r\nconst API = axios.create({ baseURL: BASE_URL });\r\n\r\nAPI.interceptors.request.use((req) => {\r\n  const userInfoJSON = localStorage.getItem('userInfo');\r\n  if (userInfoJSON) {\r\n    req.headers.Authorization = `Bearer ${JSON.parse(userInfoJSON).token}`;\r\n  }\r\n  return req;\r\n});\r\n\r\nconst formDataConfig: AxiosRequestConfig = {\r\n  headers: {\r\n    'Content-Type': 'multipart/form-data',\r\n  },\r\n};\r\n\r\n// -------------------------------------- ALL API CALLS -----------------------\r\n\r\n// USERS\r\n\r\nexport const getLoggedInUserInfo = () => API.get('/api/users/myprofile');\r\n\r\nexport const getUserInfoById = (id: string) =>\r\n  API.get(`/api/users/profile/${id}`);\r\n\r\nexport const followUser = (id: string) => API.put(`/api/users/${id}/follow`);\r\n\r\nexport const getUserFollowers = (id: string) =>\r\n  API.get(`/api/users/${id}/followers`);\r\n\r\nexport const getUserFollowng = (id: string) =>\r\n  API.get(`/api/users/${id}/following`);\r\n\r\nexport const searchUsers = (keywords: string) =>\r\n  API.get(`api/users?search=${keywords}`);\r\n\r\nexport const registerUser = (userInfo: RegisterUserDataType) =>\r\n  API.post('/api/users', userInfo);\r\n\r\nexport const loginUser = (loginDetails: { email: string; password: string }) =>\r\n  API.post('/api/users/login', loginDetails);\r\n\r\n// POSTS\r\nexport const fetchPosts = () => API.get('/api/posts?followingOnly=true');\r\n\r\nexport const fetchUserPosts = (userId?: string) =>\r\n  API.get(`/api/posts?postedBy=${userId}`);\r\n\r\nexport const fetchUserPostReplies = (userId: string) =>\r\n  API.get(`/api/posts?postedBy=${userId}&isReply=true`);\r\n\r\nexport const fetchPostDetails = (id: string) => API.get(`/api/posts/${id}`);\r\n\r\nexport const searchPosts = (keywords: string) =>\r\n  API.get(`api/posts?search=${keywords}`);\r\n\r\nexport const createPost = (data: { content: string; replyTo?: string }) =>\r\n  API.post('/api/posts', data);\r\n\r\nexport const retweetPost = (id: string) =>\r\n  API.post<PostInterface>(`/api/posts/${id}/retweet`);\r\n\r\nexport const likePost = (id: string) => API.put(`/api/posts/${id}/like`);\r\n\r\nexport const updatePost = (id: string, body: Partial<PostInterface>) =>\r\n  API.put(`/api/posts/${id}`, body);\r\n\r\nexport const deletePost = (id: string) => API.delete(`/api/posts/${id}`);\r\n\r\n//CHATS\r\nexport const fetchChats = () => API.get('/api/chats');\r\n\r\nexport const fetchUnreadChats = () => API.get('/api/chats?unreadOnly=true');\r\n\r\nexport const fetchChatDetails = (id: string) => API.get(`/api/chats/${id}`);\r\n\r\nexport const createChat = (users: UserType[]) =>\r\n  API.post('/api/chats', { users });\r\n\r\nexport const updateChat = (id: string, name: string) =>\r\n  API.put(`/api/chats/${id}`, { chatName: name });\r\n\r\n// MESSAGES\r\nexport const sendMessage = (content: string, chatId: string) =>\r\n  API.post('/api/messages', { content, chatId });\r\n\r\nexport const getMessages = (chatId: string) =>\r\n  API.get(`/api/chats/${chatId}/messages`); // Get messages from Chats by chatId\r\n\r\nexport const markAllMessagesAsRead = (chatId: string) =>\r\n  API.put(`/api/chats/${chatId}/messages/markAsRead`);\r\n\r\n// NOTIFICATIONS\r\nexport const getNotifications = () => API.get('/api/notifications');\r\n\r\nexport const getUnreadNotifications = () =>\r\n  API.get('/api/notifications?unreadOnly=true');\r\n\r\nexport const getLatestNotification = () => API.get('/api/notifications/latest');\r\n\r\nexport const markANotificationAsOpened = (id: string) =>\r\n  API.put(`/api/notifications/${id}/markAsOpened`);\r\n\r\nexport const markAllNotificationsAsOpened = () =>\r\n  API.put('/api/notifications/markAsOpened');\r\n\r\n// UPLOADS\r\nexport const uploadProfilePicture = (formData: FormData) =>\r\n  API.post('/api/uploads/profilePicture', formData, formDataConfig);\r\n\r\nexport const uploadCoverPhoto = (formData: FormData) =>\r\n  API.post('/api/uploads/coverPhoto', formData, formDataConfig);\r\n","import { AxiosError } from 'axios';\r\n\r\nexport const getApiErrorMessage = (err: AxiosError) => {\r\n  let message = 'Something Went Wrong';\r\n  if (err.response && err.response.data.message) {\r\n    message = err.response.data.message;\r\n  } else if (err.message) {\r\n    message = err.message;\r\n  }\r\n\r\n  return message;\r\n};\r\n","import { ChatInterface } from '../chat/chatActionTypes';\r\nimport { UserType } from '../user/userActionTypes';\r\n\r\nexport const MESSAGE_LIST_LOADING = 'MESSAGE_LIST_LOADING';\r\nexport const MESSAGE_LIST_SUCCESS = 'MESSAGE_LIST_SUCCESS';\r\nexport const MESSAGE_LIST_FAIL = 'MESSAGE_LIST_FAIL';\r\n\r\nexport const MESSAGE_SEND_LOADING = 'MESSAGE_SEND_LOADING';\r\nexport const MESSAGE_SEND_SUCCESS = 'MESSAGE_SEND_SUCCESS';\r\nexport const MESSAGE_SEND_FAIL = 'MESSAGE_SEND_FAIL';\r\n\r\nexport const MESSAGE_ADD_TO_LIST = 'MESSAGE_ADD_TO_LIST';\r\n\r\nexport const MESSAGE_MARK_AS_READ_LOADING = 'MESSAGE_MARK_AS_READ_LOADING';\r\nexport const MESSAGE_MARK_AS_READ_SUCCESS = 'MESSAGE_MARK_AS_READ_SUCCESS';\r\nexport const MESSAGE_MARK_AS_READ_FAIL = 'MESSAGE_MARK_AS_READ_FAIL';\r\nexport const MESSAGE_MARK_AS_READ_RESET = 'MESSAGE_MARK_AS_READ_RESET';\r\n\r\nexport interface MessageInterface {\r\n  _id: string;\r\n  sender: UserType;\r\n  content: string;\r\n  chat: ChatInterface;\r\n  readBy: string[];\r\n  loading?: boolean;\r\n  error?: 'failed';\r\n}\r\n\r\n// List Messages\r\nexport interface MessageListLoading {\r\n  type: typeof MESSAGE_LIST_LOADING;\r\n}\r\n\r\nexport interface MessageListSuccess {\r\n  type: typeof MESSAGE_LIST_SUCCESS;\r\n  payload: MessageInterface[];\r\n}\r\n\r\nexport interface MessageListFail {\r\n  type: typeof MESSAGE_LIST_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// Create Message\r\nexport interface MessageSendLoading {\r\n  type: typeof MESSAGE_SEND_LOADING;\r\n  payload?: { sender: UserType; content: string; chat: string };\r\n}\r\n\r\nexport interface MessageSendSuccess {\r\n  type: typeof MESSAGE_SEND_SUCCESS;\r\n  payload: MessageInterface;\r\n}\r\n\r\nexport interface MessageSendFail {\r\n  type: typeof MESSAGE_SEND_FAIL;\r\n  payload: { failedTextMessage: string; error: string };\r\n}\r\n\r\n// Add new Message to a list\r\nexport interface MessageAddToList {\r\n  type: typeof MESSAGE_ADD_TO_LIST;\r\n  payload: MessageInterface;\r\n}\r\n\r\n// Mark Messages as Read\r\nexport interface MessageMarkAsReadLoading {\r\n  type: typeof MESSAGE_MARK_AS_READ_LOADING;\r\n}\r\n\r\nexport interface MessageMarkAsReadSuccess {\r\n  type: typeof MESSAGE_MARK_AS_READ_SUCCESS;\r\n}\r\n\r\nexport interface MessageMarkAsReadFail {\r\n  type: typeof MESSAGE_MARK_AS_READ_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport interface MessageMarkAsReadReset {\r\n  type: typeof MESSAGE_MARK_AS_READ_RESET;\r\n}\r\n\r\n// Dispatch Types\r\nexport type MessageSendDispatchTypes =\r\n  | MessageSendLoading\r\n  | MessageSendSuccess\r\n  | MessageSendFail;\r\n\r\nexport type MessageListDispatchTypes =\r\n  | MessageListLoading\r\n  | MessageListSuccess\r\n  | MessageListFail\r\n  | MessageSendSuccess\r\n  | MessageSendLoading\r\n  | MessageSendFail\r\n  | MessageAddToList;\r\n\r\nexport type MessageMarkAsReadDispatchTypes =\r\n  | MessageMarkAsReadLoading\r\n  | MessageMarkAsReadSuccess\r\n  | MessageMarkAsReadFail\r\n  | MessageMarkAsReadReset;\r\n","import { MessageSendSuccess } from '../message/messageActionTypes';\r\n\r\nexport const SOCKET_CONNECT = 'SOCKET_CONNECT';\r\n\r\nexport const SOCKET_CHAT_ROOM_TYPING = 'SOCKET_CHAT_ROOM_TYPING';\r\nexport const SOCKET_CHAT_ROOM_TYPING_RESET = 'SOCKET_CHAT_ROOM_TYPING_RESET';\r\n\r\nexport interface SocketConnect {\r\n  type: typeof SOCKET_CONNECT;\r\n  payload: { isConnected: boolean };\r\n}\r\n\r\nexport interface SocketChatRoomTyping {\r\n  type: typeof SOCKET_CHAT_ROOM_TYPING;\r\n  payload: { isTyping: boolean; room: string };\r\n}\r\n\r\nexport interface SocketChatRoomTypingReset {\r\n  type: typeof SOCKET_CHAT_ROOM_TYPING_RESET;\r\n}\r\nexport type SocketConnectDispatchTypes = SocketConnect | MessageSendSuccess;\r\nexport type SocketChatRoomDispatchTypes =\r\n  | SocketChatRoomTyping\r\n  | SocketChatRoomTypingReset;\r\n","import { MessageInterface } from '../message/messageActionTypes';\r\nimport { UserType } from '../user/userActionTypes';\r\n\r\nexport const CHAT_LIST_LOADING = 'CHAT_LIST_LOADING';\r\nexport const CHAT_LIST_SUCCESS = 'CHAT_LIST_SUCCESS';\r\nexport const CHAT_LIST_FAIL = 'CHAT_LIST_FAIL';\r\n\r\nexport const CHAT_UNREAD_LIST_LOADING = 'CHAT_UNREAD_LIST_LOADING';\r\nexport const CHAT_UNREAD_LIST_SUCCESS = 'CHAT_UNREAD_LIST_SUCCESS';\r\nexport const CHAT_UNREAD_LIST_FAIL = 'CHAT_UNREAD_LIST_FAIL';\r\n\r\nexport const CHAT_DETAILS_LOADING = 'CHAT_DETAILS_LOADING';\r\nexport const CHAT_DETAILS_SUCCESS = 'CHAT_DETAILS_SUCCESS';\r\nexport const CHAT_DETAILS_FAIL = 'CHAT_DETAILS_FAIL';\r\n\r\nexport const CHAT_CREATE_LOADING = 'CHAT_CREATE_LOADING';\r\nexport const CHAT_CREATE_SUCCESS = 'CHAT_CREATE_SUCCESS';\r\nexport const CHAT_CREATE_FAIL = 'CHAT_CREATE_FAIL';\r\n\r\nexport const CHAT_UPDATE_LOADING = 'CHAT_UPDATE_LOADING';\r\nexport const CHAT_UPDATE_SUCCESS = 'CHAT_UPDATE_SUCCESS';\r\nexport const CHAT_UPDATE_FAIL = 'CHAT_UPDATE_FAIL';\r\n\r\nexport interface ChatInterface {\r\n  _id: string;\r\n  chatName?: string;\r\n  isGroupChat: boolean;\r\n  users: UserType[];\r\n  latestMessage?: MessageInterface;\r\n}\r\n\r\n// List Chats\r\nexport interface ChatListLoading {\r\n  type: typeof CHAT_LIST_LOADING;\r\n}\r\n\r\nexport interface ChatListSuccess {\r\n  type: typeof CHAT_LIST_SUCCESS;\r\n  payload: ChatInterface[];\r\n}\r\n\r\nexport interface ChatListFail {\r\n  type: typeof CHAT_LIST_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// List Chats\r\nexport interface ChatUnreadListLoading {\r\n  type: typeof CHAT_UNREAD_LIST_LOADING;\r\n}\r\n\r\nexport interface ChatUnreadListSuccess {\r\n  type: typeof CHAT_UNREAD_LIST_SUCCESS;\r\n  payload: ChatInterface[];\r\n}\r\n\r\nexport interface ChatUnreadListFail {\r\n  type: typeof CHAT_UNREAD_LIST_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// Chat Details\r\nexport interface ChatDetailsLoading {\r\n  type: typeof CHAT_DETAILS_LOADING;\r\n}\r\n\r\nexport interface ChatDetailsSuccess {\r\n  type: typeof CHAT_DETAILS_SUCCESS;\r\n  payload: ChatInterface;\r\n}\r\n\r\nexport interface ChatDetailsFail {\r\n  type: typeof CHAT_DETAILS_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// Create Chat\r\nexport interface ChatCreateLoading {\r\n  type: typeof CHAT_CREATE_LOADING;\r\n}\r\n\r\nexport interface ChatCreateSuccess {\r\n  type: typeof CHAT_CREATE_SUCCESS;\r\n  payload: ChatInterface;\r\n}\r\n\r\nexport interface ChatCreateFail {\r\n  type: typeof CHAT_CREATE_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// Update Chat\r\nexport interface ChatUpdateLoading {\r\n  type: typeof CHAT_UPDATE_LOADING;\r\n}\r\n\r\nexport interface ChatUpdateSuccess {\r\n  type: typeof CHAT_UPDATE_SUCCESS;\r\n}\r\n\r\nexport interface ChatUpdateFail {\r\n  type: typeof CHAT_UPDATE_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// Dispatch Types\r\nexport type ChatListDispatchTypes =\r\n  | ChatListLoading\r\n  | ChatListSuccess\r\n  | ChatListFail;\r\n\r\nexport type ChatUnreadListDispatchTypes =\r\n  | ChatUnreadListLoading\r\n  | ChatUnreadListSuccess\r\n  | ChatUnreadListFail;\r\n\r\nexport type ChatDetailsDispatchTypes =\r\n  | ChatDetailsLoading\r\n  | ChatDetailsSuccess\r\n  | ChatDetailsFail;\r\n\r\nexport type ChatCreateDispatchTypes =\r\n  | ChatCreateLoading\r\n  | ChatCreateSuccess\r\n  | ChatCreateFail;\r\n\r\nexport type ChatUpdateDispatchTypes =\r\n  | ChatUpdateLoading\r\n  | ChatUpdateSuccess\r\n  | ChatUpdateFail;\r\n","import { Dispatch } from 'react';\r\nimport { getApiErrorMessage } from '../../../utils/errorMessage';\r\nimport {\r\n  MessageSendDispatchTypes,\r\n  MESSAGE_SEND_LOADING,\r\n  MESSAGE_SEND_SUCCESS,\r\n  MESSAGE_SEND_FAIL,\r\n  MessageListDispatchTypes,\r\n  MESSAGE_LIST_LOADING,\r\n  MESSAGE_LIST_SUCCESS,\r\n  MESSAGE_LIST_FAIL,\r\n  MessageMarkAsReadDispatchTypes,\r\n  MESSAGE_MARK_AS_READ_LOADING,\r\n  MESSAGE_MARK_AS_READ_SUCCESS,\r\n  MESSAGE_MARK_AS_READ_FAIL,\r\n} from './messageActionTypes';\r\nimport * as api from '../../../api/index';\r\nimport { emitNewMessageSocket } from '../socket/socketActions';\r\nimport { RootStore } from '../../store';\r\n\r\nexport const listMessages = (chatId: string) => {\r\n  return async (dispatch: Dispatch<MessageListDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: MESSAGE_LIST_LOADING });\r\n\r\n      const { data } = await api.getMessages(chatId);\r\n\r\n      dispatch({ type: MESSAGE_LIST_SUCCESS, payload: data });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: MESSAGE_LIST_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const sendMessage = (content: string, chatId: string) => {\r\n  return async (\r\n    dispatch: Dispatch<MessageSendDispatchTypes>,\r\n    getState: () => RootStore\r\n  ) => {\r\n    const uniqueDate = Date.now().toString();\r\n    localStorage.setItem('messageId', uniqueDate);\r\n    try {\r\n      const sender = getState().loggedInUserInfo.user!;\r\n\r\n      dispatch({\r\n        type: MESSAGE_SEND_LOADING,\r\n        payload: { sender, content, chat: chatId },\r\n      });\r\n\r\n      const { data } = await api.sendMessage(content, chatId);\r\n\r\n      emitNewMessageSocket(data);\r\n\r\n      dispatch({ type: MESSAGE_SEND_SUCCESS, payload: data });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: MESSAGE_SEND_FAIL,\r\n        payload: {\r\n          failedTextMessage: content,\r\n          error: getApiErrorMessage(err),\r\n        },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const markMessagesAsRead = (chatId: string) => {\r\n  return async (dispatch: Dispatch<MessageMarkAsReadDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: MESSAGE_MARK_AS_READ_LOADING });\r\n\r\n      await api.markAllMessagesAsRead(chatId);\r\n\r\n      dispatch({ type: MESSAGE_MARK_AS_READ_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: MESSAGE_MARK_AS_READ_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n","import { Dispatch } from 'react';\r\nimport {\r\n  ChatCreateDispatchTypes,\r\n  ChatDetailsDispatchTypes,\r\n  ChatListDispatchTypes,\r\n  ChatUnreadListDispatchTypes,\r\n  ChatUpdateDispatchTypes,\r\n  CHAT_CREATE_FAIL,\r\n  CHAT_CREATE_LOADING,\r\n  CHAT_CREATE_SUCCESS,\r\n  CHAT_DETAILS_FAIL,\r\n  CHAT_DETAILS_LOADING,\r\n  CHAT_DETAILS_SUCCESS,\r\n  CHAT_LIST_FAIL,\r\n  CHAT_LIST_LOADING,\r\n  CHAT_LIST_SUCCESS,\r\n  CHAT_UNREAD_LIST_FAIL,\r\n  CHAT_UNREAD_LIST_LOADING,\r\n  CHAT_UNREAD_LIST_SUCCESS,\r\n  CHAT_UPDATE_FAIL,\r\n  CHAT_UPDATE_LOADING,\r\n  CHAT_UPDATE_SUCCESS,\r\n} from './chatActionTypes';\r\n\r\nimport * as api from '../../../api/index';\r\nimport * as messagesActions from '../message/messageActions';\r\nimport { UserType } from '../user/userActionTypes';\r\nimport { getApiErrorMessage } from '../../../utils/errorMessage';\r\n\r\nexport const listChats = () => {\r\n  return async (dispatch: Dispatch<ChatListDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: CHAT_LIST_LOADING });\r\n\r\n      const { data } = await api.fetchChats();\r\n\r\n      dispatch({ type: CHAT_LIST_SUCCESS, payload: data });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CHAT_LIST_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const listUnreadChats = () => {\r\n  return async (dispatch: Dispatch<ChatUnreadListDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: CHAT_UNREAD_LIST_LOADING });\r\n\r\n      const { data } = await api.fetchUnreadChats();\r\n\r\n      dispatch({ type: CHAT_UNREAD_LIST_SUCCESS, payload: data });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CHAT_UNREAD_LIST_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getChatDetails = (id: string) => {\r\n  return async (dispatch: Dispatch<ChatDetailsDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: CHAT_DETAILS_LOADING });\r\n\r\n      const { data } = await api.fetchChatDetails(id);\r\n\r\n      dispatch({ type: CHAT_DETAILS_SUCCESS, payload: data });\r\n\r\n      (dispatch as any)(messagesActions.markMessagesAsRead(id));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CHAT_DETAILS_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const createChat = (users: UserType[]) => {\r\n  return async (dispatch: Dispatch<ChatCreateDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: CHAT_CREATE_LOADING });\r\n\r\n      const { data } = await api.createChat(users);\r\n\r\n      dispatch({ type: CHAT_CREATE_SUCCESS, payload: data });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CHAT_CREATE_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateChat = (id: string, name: string) => {\r\n  return async (dispatch: Dispatch<ChatUpdateDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: CHAT_UPDATE_LOADING });\r\n\r\n      await api.updateChat(id, name);\r\n\r\n      dispatch({ type: CHAT_UPDATE_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CHAT_UPDATE_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n","import { UserType } from '../user/userActionTypes';\r\n\r\nexport const NOTIFICATION_LIST_LOADING = 'NOTIFICATION_LIST_LOADING';\r\nexport const NOTIFICATION_LIST_SUCCESS = 'NOTIFICATION_LIST_SUCCESS';\r\nexport const NOTIFICATION_LIST_FAIL = 'NOTIFICATION_LIST_FAIL';\r\n\r\nexport const NOTIFICATION_UNREAD_LIST_LOADING =\r\n  'NOTIFICATION_UNREAD_LIST_LOADING';\r\nexport const NOTIFICATION_UNREAD_LIST_SUCCESS =\r\n  'NOTIFICATION_UNREAD_LIST_SUCCESS';\r\nexport const NOTIFICATION_UNREAD_LIST_FAIL = 'NOTIFICATION_UNREAD_LIST_FAIL';\r\n\r\nexport const NOTIFICATION_LATEST_LOADING = 'NOTIFICATION_LATEST_LOADING';\r\nexport const NOTIFICATION_LATEST_SUCCESS = 'NOTIFICATION_LATEST_SUCCESS';\r\nexport const NOTIFICATION_LATEST_FAIL = 'NOTIFICATION_LATEST_FAIL';\r\n\r\nexport const NOTIFICATION_MARK_AS_OPENED_LOADING =\r\n  'NOTIFICATION_MARK_AS_OPENED_LOADING';\r\nexport const NOTIFICATION_MARK_AS_OPENED_SUCCESS =\r\n  'NOTIFICATION_MARK_AS_OPENED_SUCCESS';\r\nexport const NOTIFICATION_MARK_AS_OPENED_FAIL =\r\n  'NOTIFICATION_MARK_AS_OPENED_FAIL';\r\nexport const NOTIFICATION_MARK_AS_OPENED_RESET =\r\n  'NOTIFICATION_MARK_AS_OPENED_RESET';\r\n\r\nexport const NOTIFICATION_POPUP_REMOVE = 'NOTIFICATION_POPUP_REMOVE';\r\n\r\nexport interface NotificationInterface {\r\n  _id: string;\r\n  userTo: UserType;\r\n  userFrom: UserType;\r\n  notificationType: 'follow' | 'retweet' | 'postLike' | 'reply' | 'newMessage';\r\n  opened?: boolean;\r\n  entityId: string;\r\n}\r\n\r\n// NOTIFICATION LIST\r\nexport interface NotificationListLoading {\r\n  type: typeof NOTIFICATION_LIST_LOADING;\r\n}\r\n\r\nexport interface NotificationListSuccess {\r\n  type: typeof NOTIFICATION_LIST_SUCCESS;\r\n  payload: NotificationInterface[];\r\n}\r\n\r\nexport interface NotificationListFail {\r\n  type: typeof NOTIFICATION_LIST_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// UNREAD NOTIFICATION  LIST\r\nexport interface NotificationUnreadListLoading {\r\n  type: typeof NOTIFICATION_UNREAD_LIST_LOADING;\r\n}\r\n\r\nexport interface NotificationUnreadListSuccess {\r\n  type: typeof NOTIFICATION_UNREAD_LIST_SUCCESS;\r\n  payload: NotificationInterface[];\r\n}\r\n\r\nexport interface NotificationUnreadListFail {\r\n  type: typeof NOTIFICATION_UNREAD_LIST_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// LATEST NOTIFICATION\r\nexport interface NotificationLatestLoading {\r\n  type: typeof NOTIFICATION_LATEST_LOADING;\r\n}\r\n\r\nexport interface NotificationLatestSuccess {\r\n  type: typeof NOTIFICATION_LATEST_SUCCESS;\r\n  payload: NotificationInterface;\r\n}\r\n\r\nexport interface NotificationLatestFail {\r\n  type: typeof NOTIFICATION_LATEST_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// MARK NOTIFICATION AS OPENED\r\nexport interface NotificationMarkAsOpenedLoading {\r\n  type: typeof NOTIFICATION_MARK_AS_OPENED_LOADING;\r\n}\r\n\r\nexport interface NotificationMarkAsOpenedSuccess {\r\n  type: typeof NOTIFICATION_MARK_AS_OPENED_SUCCESS;\r\n}\r\n\r\nexport interface NotificationMarkAsOpenedFail {\r\n  type: typeof NOTIFICATION_MARK_AS_OPENED_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport interface NotificationMarkAsOpenedReset {\r\n  type: typeof NOTIFICATION_MARK_AS_OPENED_RESET;\r\n}\r\n\r\n// REMOVE NOTIFICATION POPUP\r\nexport interface NotificationPopupRemove {\r\n  type: typeof NOTIFICATION_POPUP_REMOVE;\r\n}\r\n\r\nexport type NotificationListDispatchTypes =\r\n  | NotificationListLoading\r\n  | NotificationListSuccess\r\n  | NotificationListFail;\r\n\r\nexport type NotificationUnreadListDispatchTypes =\r\n  | NotificationUnreadListLoading\r\n  | NotificationUnreadListSuccess\r\n  | NotificationUnreadListFail;\r\n\r\nexport type NotificationLatestDispatchTypes =\r\n  | NotificationLatestLoading\r\n  | NotificationLatestSuccess\r\n  | NotificationLatestFail\r\n  | NotificationPopupRemove;\r\n\r\nexport type NotificationMarkAsOpenedDispatchTypes =\r\n  | NotificationMarkAsOpenedLoading\r\n  | NotificationMarkAsOpenedSuccess\r\n  | NotificationMarkAsOpenedFail\r\n  | NotificationMarkAsOpenedReset;\r\n","import { Dispatch } from 'react';\r\nimport { getApiErrorMessage } from '../../../utils/errorMessage';\r\nimport {\r\n  NotificationListDispatchTypes,\r\n  NotificationMarkAsOpenedDispatchTypes,\r\n  NotificationLatestDispatchTypes,\r\n  NotificationUnreadListDispatchTypes,\r\n  NOTIFICATION_LIST_FAIL,\r\n  NOTIFICATION_LIST_LOADING,\r\n  NOTIFICATION_LIST_SUCCESS,\r\n  NOTIFICATION_MARK_AS_OPENED_FAIL,\r\n  NOTIFICATION_MARK_AS_OPENED_LOADING,\r\n  NOTIFICATION_MARK_AS_OPENED_SUCCESS,\r\n  NOTIFICATION_UNREAD_LIST_FAIL,\r\n  NOTIFICATION_UNREAD_LIST_LOADING,\r\n  NOTIFICATION_UNREAD_LIST_SUCCESS,\r\n  NOTIFICATION_LATEST_LOADING,\r\n  NOTIFICATION_LATEST_SUCCESS,\r\n  NOTIFICATION_LATEST_FAIL,\r\n} from './notificationActionTypes';\r\nimport * as api from '../../../api';\r\n\r\nexport const listNotifications = () => {\r\n  return async (dispatch: Dispatch<NotificationListDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: NOTIFICATION_LIST_LOADING });\r\n\r\n      const { data } = await api.getNotifications();\r\n\r\n      dispatch({ type: NOTIFICATION_LIST_SUCCESS, payload: data });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFICATION_LIST_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const listUnreadNotifications = () => {\r\n  return async (dispatch: Dispatch<NotificationUnreadListDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: NOTIFICATION_UNREAD_LIST_LOADING });\r\n\r\n      const { data } = await api.getUnreadNotifications();\r\n\r\n      dispatch({ type: NOTIFICATION_UNREAD_LIST_SUCCESS, payload: data });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFICATION_UNREAD_LIST_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getLatestNotification = () => {\r\n  return async (dispatch: Dispatch<NotificationLatestDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: NOTIFICATION_LATEST_LOADING });\r\n\r\n      const { data } = await api.getLatestNotification();\r\n\r\n      dispatch({ type: NOTIFICATION_LATEST_SUCCESS, payload: data });\r\n\r\n      (dispatch as any)(listUnreadNotifications());\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFICATION_LATEST_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const markNotificationsAsOpened = (\r\n  notificationId?: string,\r\n  callback?: () => void\r\n) => {\r\n  return async (dispatch: Dispatch<NotificationMarkAsOpenedDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: NOTIFICATION_MARK_AS_OPENED_LOADING });\r\n\r\n      notificationId\r\n        ? await api.markANotificationAsOpened(notificationId)\r\n        : await api.markAllNotificationsAsOpened();\r\n\r\n      callback ? callback() : window.location.reload();\r\n\r\n      dispatch({ type: NOTIFICATION_MARK_AS_OPENED_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: NOTIFICATION_MARK_AS_OPENED_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n","import { Dispatch } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { BASE_URL } from './index';\r\n\r\nimport {\r\n  MessageInterface,\r\n  MESSAGE_ADD_TO_LIST,\r\n} from '../store/actions/message/messageActionTypes';\r\nimport {\r\n  SocketConnectDispatchTypes,\r\n  SOCKET_CONNECT,\r\n} from '../store/actions/socket/socketsActionsTypes';\r\nimport * as chatActions from '../store/actions/chat/chatActions';\r\nimport * as messageActions from '../store/actions/message/messageActions';\r\nimport * as notificationActions from '../store/actions/notification/notificationActions';\r\n\r\nimport { UserType } from '../store/actions/user/userActionTypes';\r\nimport { NOTIFICATION_LATEST_SUCCESS } from '../store/actions/notification/notificationActionTypes';\r\n\r\nconst socket = io(BASE_URL);\r\n\r\nconst connectSocket = (\r\n  user: UserType,\r\n  dispatch: Dispatch<SocketConnectDispatchTypes | any>\r\n) => {\r\n  socket.emit('setup', user);\r\n\r\n  socket.on('connected', () =>\r\n    dispatch({ type: SOCKET_CONNECT, payload: { isConnected: true } })\r\n  );\r\n\r\n  socket.on('message received', (newMessage: MessageInterface) => {\r\n    const currentUserPath = document.location.pathname;\r\n    const isCorrectChatPage =\r\n      currentUserPath === `/message/${newMessage.chat._id}`;\r\n\r\n    const showNotification = !isCorrectChatPage;\r\n\r\n    if (showNotification) {\r\n      console.log('Show notification...');\r\n      dispatch({ type: NOTIFICATION_LATEST_SUCCESS, payload: newMessage });\r\n    } else {\r\n      dispatch({ type: MESSAGE_ADD_TO_LIST, payload: newMessage });\r\n      dispatch(messageActions.markMessagesAsRead(newMessage.chat._id));\r\n    }\r\n\r\n    dispatch(chatActions.listUnreadChats());\r\n  });\r\n\r\n  socket.on('notification received', () => {\r\n    dispatch(notificationActions.getLatestNotification());\r\n  });\r\n};\r\n\r\nexport { socket, connectSocket };\r\n","import { UserType } from '../user/userActionTypes';\r\n\r\nexport const POST_CREATE_LOADING = 'POST_CREATE_LOADING';\r\nexport const POST_CREATE_SUCCESS = 'POST_CREATE_SUCCESS';\r\nexport const POST_CREATE_FAIL = 'POST_CREATE_FAIL';\r\n\r\nexport const POST_LIST_LOADING = 'POST_LIST_LOADING';\r\nexport const POST_LIST_SUCCESS = 'POST_LIST_SUCCESS';\r\nexport const POST_LIST_FAIL = 'POST_LIST_FAIL';\r\nexport const POST_LIST_UPDATE_ONLIKE = 'POST_LIST_UPDATE_ONLIKE';\r\n\r\nexport const POST_DETAILS_LOADING = 'POST_DETAILS_LOADING';\r\nexport const POST_DETAILS_SUCCESS = 'POST_DETAILS_SUCCESS';\r\nexport const POST_DETAILS_FAIL = 'POST_DETAILS_FAIL';\r\n\r\nexport const POST_UPDATE_LOADING = 'POST_UPDATE_LOADING';\r\nexport const POST_UPDATE_SUCCESS = 'POST_UPDATE_SUCCESS';\r\nexport const POST_UPDATE_FAIL = 'POST_UPDATE_FAIL';\r\n\r\nexport const POST_LIKE_LOADING = 'POST_LIKE_LOADING';\r\nexport const POST_LIKE_SUCCESS = 'POST_LIKE_SUCCESS';\r\nexport const POST_LIKE_FAIL = 'POST_LIKE_FAIL';\r\n\r\nexport const POST_RETWEET = 'POST_RETWEET';\r\n\r\nexport const POST_DELETE_LOADING = 'POST_DELETE_LOADING';\r\nexport const POST_DELETE_SUCCESS = 'POST_DELETE_SUCCESS';\r\nexport const POST_DELETE_FAIL = 'POST_DELETE_FAIL';\r\n\r\nexport interface PostInterface {\r\n  _id: string;\r\n  content: string;\r\n  postedBy: UserType;\r\n  pinned: boolean;\r\n  createdAt: string;\r\n  likes: string[];\r\n  retweetUsers: string[];\r\n  retweetData: PostInterface;\r\n  replyTo: PostInterface;\r\n}\r\n\r\n// CREATE POST\r\nexport interface PostCreateLoading {\r\n  type: typeof POST_CREATE_LOADING;\r\n}\r\n\r\nexport interface PostCreateSuccess {\r\n  type: typeof POST_CREATE_SUCCESS;\r\n  payload: PostInterface;\r\n}\r\n\r\nexport interface PostCreateFail {\r\n  type: typeof POST_CREATE_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// LIST POST\r\nexport interface PostListLoading {\r\n  type: typeof POST_LIST_LOADING;\r\n}\r\n\r\nexport interface PostListSuccess {\r\n  type: typeof POST_LIST_SUCCESS;\r\n  payload: PostInterface[];\r\n}\r\n\r\nexport interface PostListUpdateOnLike {\r\n  type: typeof POST_LIST_UPDATE_ONLIKE;\r\n  payload: { data: PostInterface; retweetId: string | null };\r\n}\r\n\r\nexport interface PostListFail {\r\n  type: typeof POST_LIST_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// POST DETAILS\r\nexport interface PostDetailsLoading {\r\n  type: typeof POST_DETAILS_LOADING;\r\n}\r\n\r\nexport interface PostDetailsSuccess {\r\n  type: typeof POST_DETAILS_SUCCESS;\r\n  payload: {\r\n    postData: PostInterface;\r\n    replyTo?: PostInterface;\r\n    replies: PostInterface[];\r\n  };\r\n}\r\n\r\nexport interface PostDetailsFail {\r\n  type: typeof POST_DETAILS_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// LIKE POST\r\nexport interface PostLikeLoading {\r\n  type: typeof POST_LIKE_LOADING;\r\n}\r\n\r\nexport interface PostLikeSuccess {\r\n  type: typeof POST_LIKE_SUCCESS;\r\n  payload: PostInterface;\r\n}\r\n\r\nexport interface PostLikeFail {\r\n  type: typeof POST_LIKE_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// RETWEET POST\r\nexport interface PostRetweet {\r\n  type: typeof POST_RETWEET;\r\n  payload: { data: PostInterface; retweetId: string | null };\r\n}\r\n\r\n// UPDATE POST\r\nexport interface PostUpdateLoading {\r\n  type: typeof POST_UPDATE_LOADING;\r\n}\r\n\r\nexport interface PostUpdateSuccess {\r\n  type: typeof POST_UPDATE_SUCCESS;\r\n  payload: PostInterface;\r\n}\r\n\r\nexport interface PostUpdateFail {\r\n  type: typeof POST_UPDATE_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// DELETE POST\r\nexport interface PostDeleteLoading {\r\n  type: typeof POST_DELETE_LOADING;\r\n}\r\n\r\nexport interface PostDeleteSuccess {\r\n  type: typeof POST_DELETE_SUCCESS;\r\n  payload: 'string';\r\n}\r\n\r\nexport interface PostDeleteFail {\r\n  type: typeof POST_DELETE_FAIL;\r\n  payload: string;\r\n}\r\n\r\n// DISPATCH TYPES\r\nexport type PostCreateDispatchTypes =\r\n  | PostCreateLoading\r\n  | PostCreateSuccess\r\n  | PostCreateFail;\r\n\r\nexport type PostListDispatchTypes =\r\n  | PostListLoading\r\n  | PostListSuccess\r\n  | PostListFail\r\n  | PostListUpdateOnLike\r\n  | PostCreateSuccess\r\n  | PostRetweet;\r\n\r\nexport type PostDetailsDispatchTypes =\r\n  | PostDetailsLoading\r\n  | PostDetailsSuccess\r\n  | PostDetailsFail;\r\n\r\nexport type PostLikeDispatchTypes =\r\n  | PostLikeLoading\r\n  | PostLikeSuccess\r\n  | PostLikeFail\r\n  | PostListUpdateOnLike;\r\n\r\nexport type PostRetweetDispatchType = PostRetweet;\r\n\r\nexport type PostUpdateDispatchTypes =\r\n  | PostUpdateLoading\r\n  | PostUpdateSuccess\r\n  | PostUpdateFail;\r\n\r\nexport type PostDeleteDispatchTypes =\r\n  | PostDeleteLoading\r\n  | PostDeleteSuccess\r\n  | PostDeleteFail;\r\n","import {\r\n  PostCreateDispatchTypes,\r\n  PostDeleteDispatchTypes,\r\n  PostDetailsDispatchTypes,\r\n  PostInterface,\r\n  PostLikeDispatchTypes,\r\n  PostListDispatchTypes,\r\n  PostUpdateDispatchTypes,\r\n  POST_CREATE_FAIL,\r\n  POST_CREATE_LOADING,\r\n  POST_CREATE_SUCCESS,\r\n  POST_DELETE_FAIL,\r\n  POST_DELETE_LOADING,\r\n  POST_DELETE_SUCCESS,\r\n  POST_DETAILS_FAIL,\r\n  POST_DETAILS_LOADING,\r\n  POST_DETAILS_SUCCESS,\r\n  POST_LIKE_FAIL,\r\n  POST_LIKE_LOADING,\r\n  POST_LIKE_SUCCESS,\r\n  POST_LIST_FAIL,\r\n  POST_LIST_LOADING,\r\n  POST_LIST_SUCCESS,\r\n  POST_LIST_UPDATE_ONLIKE,\r\n  POST_RETWEET,\r\n  POST_UPDATE_FAIL,\r\n  POST_UPDATE_LOADING,\r\n  POST_UPDATE_SUCCESS,\r\n} from '../actions/post/postActionTypes';\r\n\r\n// ---TYPES AND INTERFACES\r\ninterface DefaultStateI {\r\n  loading?: boolean;\r\n  error?: string;\r\n}\r\n\r\ninterface PostListDefaultStateI extends DefaultStateI {\r\n  posts: PostInterface[];\r\n}\r\n\r\ninterface PostDetailsDefaultStateI extends DefaultStateI {\r\n  post?: {\r\n    postData: PostInterface;\r\n    replyTo?: PostInterface;\r\n    replies: PostInterface[];\r\n  };\r\n}\r\n\r\ninterface PostCreateDefaultStateI extends DefaultStateI {\r\n  post?: PostInterface;\r\n  success?: boolean;\r\n}\r\n\r\ninterface PostDeleteDefaultStateI extends DefaultStateI {\r\n  post?: PostInterface;\r\n  success?: boolean;\r\n  message?: string;\r\n}\r\n\r\ninterface PostLikeDefaultStateI extends DefaultStateI {\r\n  post?: PostInterface;\r\n  success?: boolean;\r\n}\r\n\r\ninterface PostUpdateDefaultStateI extends DefaultStateI {\r\n  success?: boolean;\r\n}\r\n\r\n// ------REDUCERS\r\nexport const postListReducer = (\r\n  state: PostListDefaultStateI = { posts: [] },\r\n  action: PostListDispatchTypes\r\n): PostListDefaultStateI => {\r\n  switch (action.type) {\r\n    case POST_LIST_LOADING:\r\n      return { ...state, loading: true };\r\n    case POST_LIST_SUCCESS:\r\n      return { loading: false, posts: action.payload };\r\n    case POST_LIST_FAIL:\r\n      return { ...state, loading: false, error: action.payload };\r\n    case POST_CREATE_SUCCESS:\r\n      let updatedPosts = [...state.posts];\r\n      updatedPosts.unshift(action.payload);\r\n      return { ...state, posts: updatedPosts };\r\n    case POST_LIST_UPDATE_ONLIKE:\r\n      return updatePostField(\r\n        state.posts,\r\n        action.payload.data,\r\n        action.payload.retweetId,\r\n        'likes'\r\n      );\r\n    case POST_RETWEET:\r\n      return updatePostField(\r\n        state.posts,\r\n        action.payload.data,\r\n        action.payload.retweetId,\r\n        'retweetUsers'\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const postDetailsReducer = (\r\n  state: PostDetailsDefaultStateI = {},\r\n  action: PostDetailsDispatchTypes\r\n): PostDetailsDefaultStateI => {\r\n  switch (action.type) {\r\n    case POST_DETAILS_LOADING:\r\n      return { loading: true };\r\n    case POST_DETAILS_SUCCESS:\r\n      return { loading: false, post: action.payload };\r\n    case POST_DETAILS_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const postCreateReducer = (\r\n  state: PostCreateDefaultStateI = {},\r\n  action: PostCreateDispatchTypes\r\n): PostCreateDefaultStateI => {\r\n  switch (action.type) {\r\n    case POST_CREATE_LOADING:\r\n      return { loading: true };\r\n    case POST_CREATE_SUCCESS:\r\n      return { loading: false, success: true, post: action.payload };\r\n    case POST_CREATE_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const postDeleteReducer = (\r\n  state: PostDeleteDefaultStateI = {},\r\n  action: PostDeleteDispatchTypes\r\n): PostDeleteDefaultStateI => {\r\n  switch (action.type) {\r\n    case POST_DELETE_LOADING:\r\n      return { loading: true };\r\n    case POST_DELETE_SUCCESS:\r\n      return { loading: false, success: true, message: action.payload };\r\n    case POST_DELETE_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const postLikeReducer = (\r\n  state: PostLikeDefaultStateI = {},\r\n  action: PostLikeDispatchTypes\r\n): PostLikeDefaultStateI => {\r\n  switch (action.type) {\r\n    case POST_LIKE_LOADING:\r\n      return { loading: true };\r\n    case POST_LIKE_SUCCESS:\r\n      return { loading: false, success: true, post: action.payload };\r\n    case POST_LIKE_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const postUpdateReducer = (\r\n  state: PostUpdateDefaultStateI = {},\r\n  action: PostUpdateDispatchTypes\r\n): PostUpdateDefaultStateI => {\r\n  switch (action.type) {\r\n    case POST_UPDATE_LOADING:\r\n      return { loading: true };\r\n    case POST_UPDATE_SUCCESS:\r\n      return { loading: false, success: true };\r\n    case POST_UPDATE_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// ------UTILS FUNCTIONS\r\n\r\nfunction updatePostField<T extends keyof PostInterface>(\r\n  postsArray: PostInterface[],\r\n  newPost: PostInterface,\r\n  retweetId: string | null,\r\n  field: T\r\n) {\r\n  const postToBeUpdated_id = retweetId || newPost._id;\r\n  const foundIndex = postsArray.findIndex((p) => p._id === postToBeUpdated_id);\r\n  const updatedPosts = [...postsArray];\r\n\r\n  if (retweetId) {\r\n    updatedPosts[foundIndex].retweetData[field] = newPost[field];\r\n  } else {\r\n    updatedPosts[foundIndex][field] = newPost[field];\r\n  }\r\n\r\n  return { posts: updatedPosts };\r\n}\r\n","import { PostInterface } from '../post/postActionTypes';\r\nimport { UserType } from '../user/userActionTypes';\r\n\r\nexport const SEARCH_LOADING = 'SEARCH_LOADING';\r\nexport const SEARCH_POSTS_SUCCESS = 'SEARCH_POSTS_SUCCESS';\r\nexport const SEARCH_USERS_SUCCESS = 'SEARCH_USERS_SUCCESS';\r\n\r\nexport const SEARCH_FAIL = 'SEARCH_FAIL';\r\nexport const SEARCH_RESET = 'SEARCH_RESET';\r\n\r\nexport type SearchTypes = 'users' | 'posts';\r\n\r\nexport interface SearchObjectI {\r\n  type: SearchTypes;\r\n  text: string;\r\n}\r\n\r\nexport interface SearchLoading {\r\n  type: typeof SEARCH_LOADING;\r\n}\r\n\r\nexport interface SearchPostsSuccess {\r\n  type: typeof SEARCH_POSTS_SUCCESS;\r\n  payload: PostInterface[];\r\n}\r\n\r\nexport interface SearchUsersSuccess {\r\n  type: typeof SEARCH_USERS_SUCCESS;\r\n  payload: UserType[];\r\n}\r\n\r\nexport interface SearchFail {\r\n  type: typeof SEARCH_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport interface SearchReset {\r\n  type: typeof SEARCH_RESET;\r\n}\r\n\r\nexport type SearchDispatchTypes =\r\n  | SearchLoading\r\n  | SearchPostsSuccess\r\n  | SearchUsersSuccess\r\n  | SearchFail\r\n  | SearchReset;\r\n","import { Dispatch } from 'react';\r\nimport { socket, connectSocket } from '../../../api/sockets';\r\nimport { MessageInterface } from '../message/messageActionTypes';\r\nimport { UserType } from '../user/userActionTypes';\r\nimport {\r\n  SocketChatRoomDispatchTypes,\r\n  SocketConnectDispatchTypes,\r\n  SOCKET_CHAT_ROOM_TYPING,\r\n} from './socketsActionsTypes';\r\n\r\nimport store from '../../store';\r\n\r\n// updateTypingSocket variables\r\nlet typing = false;\r\nlet lastTypingTime: number;\r\n\r\nexport const setupSocket = (user: UserType) => {\r\n  return (dispatch: Dispatch<SocketConnectDispatchTypes>) => {\r\n    connectSocket(user, dispatch);\r\n  };\r\n};\r\n\r\nexport const joinChatRoomSocket = (chatId: string) => {\r\n  return (dispatch: Dispatch<SocketChatRoomDispatchTypes>) => {\r\n    socket.emit('join room', chatId);\r\n    socket.on('typing', (room: string) =>\r\n      dispatch({\r\n        type: SOCKET_CHAT_ROOM_TYPING,\r\n        payload: { isTyping: true, room },\r\n      })\r\n    );\r\n    socket.on('stop typing', (room: string) =>\r\n      dispatch({\r\n        type: SOCKET_CHAT_ROOM_TYPING,\r\n        payload: { isTyping: false, room },\r\n      })\r\n    );\r\n  };\r\n};\r\n\r\nexport const emitStopTypingSocket = (chatId: string) => {\r\n  socket.emit('stop typing', chatId);\r\n  typing = false;\r\n};\r\n\r\nexport const updateTypingSocket = (chatId: string) => {\r\n  if (!typing) {\r\n    typing = true;\r\n    socket.emit('typing', chatId);\r\n  }\r\n\r\n  lastTypingTime = new Date().getTime();\r\n  const timerLength = 3000;\r\n\r\n  setTimeout(() => {\r\n    const timeNow = new Date().getTime();\r\n    const timeDiff = timeNow - lastTypingTime;\r\n\r\n    if (timeDiff >= timerLength && typing) {\r\n      emitStopTypingSocket(chatId);\r\n    }\r\n  }, timerLength);\r\n};\r\n\r\nexport const emitNewMessageSocket = (message: MessageInterface) => {\r\n  socket.emit('new message', message);\r\n};\r\n\r\nexport const emitNewNotificationSocket = (user: string | UserType) => {\r\n  let id;\r\n  if (typeof user === 'string') {\r\n    id = user;\r\n  } else {\r\n    id = user._id;\r\n  }\r\n\r\n  const loggedInUserId = store.getState().loggedInUserInfo.user?._id;\r\n  if (id === loggedInUserId) return;\r\n\r\n  socket.emit('notification received', id);\r\n};\r\n","export const PROFILE_PIC_UPLOAD_LOADING = 'PROFILE_PIC_UPLOAD_LOADING';\r\nexport const PROFILE_PIC_UPLOAD_SUCCESS = 'PROFILE_PIC_UPLOAD_SUCCESS';\r\nexport const PROFILE_PIC_UPLOAD_FAIL = 'PROFILE_PIC_UPLOAD_FAIL';\r\n\r\nexport interface ProfilePicUploadLoading {\r\n  type: typeof PROFILE_PIC_UPLOAD_LOADING;\r\n}\r\n\r\nexport interface ProfilePicUploadSuccess {\r\n  type: typeof PROFILE_PIC_UPLOAD_SUCCESS;\r\n}\r\n\r\nexport interface ProfilePicUploadFail {\r\n  type: typeof PROFILE_PIC_UPLOAD_FAIL;\r\n  payload: string;\r\n}\r\n\r\nexport type ProfilePicUploadDispatchTypes =\r\n  | ProfilePicUploadLoading\r\n  | ProfilePicUploadSuccess\r\n  | ProfilePicUploadFail;\r\n","import {\r\n  UserType,\r\n  UserInfoDispatchTypes,\r\n  USER_INFO_LOADING,\r\n  USER_INFO_SUCCESS,\r\n  USER_INFO_FAIL,\r\n  LoggedInUserI,\r\n  USER_LOGOUT,\r\n  LoggedInUserInfoDispatchTypes,\r\n  LOGGED_IN_USER_INFO_LOADING,\r\n  LOGGED_IN_USER_INFO_SUCCESS,\r\n  LOGGED_IN_USER_INFO_FAIL,\r\n  USER_AUTHENTICATE_LOADING,\r\n  UserAuthenticateDispatchTypes,\r\n  USER_AUTHENTICATE_SUCCESS,\r\n  USER_AUTHENTICATE_FAIL,\r\n  USER_INFO_UPDATE_FOLLOWERS,\r\n  UserFollowersDispatchTypes,\r\n  USER_FOLLOWERS_LOADING,\r\n  USER_FOLLOWERS_SUCCESS,\r\n  USER_FOLLOWERS_FAIL,\r\n  UserFollowingListDispatchTypes,\r\n  USER_FOLLOWING_LIST_LOADING,\r\n  USER_FOLLOWING_LIST_SUCCESS,\r\n  USER_FOLLOWING_LIST_FAIL,\r\n  UserFollowDispatchTypes,\r\n  USER_FOLLOW_SUCCESS,\r\n  USER_FOLLOW_LOADING,\r\n  USER_FOLLOW_FAIL,\r\n} from '../actions/user/userActionTypes';\r\n\r\ninterface DefaultStateI {\r\n  loading?: boolean;\r\n  user?: UserType;\r\n  error?: string;\r\n  success?: boolean;\r\n}\r\n\r\ninterface DefaultLoginStateI {\r\n  loading?: boolean;\r\n  user?: LoggedInUserI;\r\n  error?: string;\r\n}\r\n\r\ninterface DefaultFollowingFollowersListI {\r\n  loading?: boolean;\r\n  users: UserType[];\r\n  error?: string;\r\n}\r\n\r\nconst defaultState: DefaultStateI = {\r\n  loading: false,\r\n};\r\n\r\nconst defaultLoginState: DefaultLoginStateI = {\r\n  loading: false,\r\n};\r\n\r\nexport const userAuthenticateReducer = (\r\n  state: DefaultLoginStateI = defaultLoginState,\r\n  action: UserAuthenticateDispatchTypes\r\n): DefaultLoginStateI => {\r\n  switch (action.type) {\r\n    case USER_AUTHENTICATE_LOADING:\r\n      return { loading: true };\r\n    case USER_AUTHENTICATE_SUCCESS:\r\n      return { loading: false, user: action.payload };\r\n    case USER_AUTHENTICATE_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    case USER_LOGOUT:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const loggedInUserInfoReducer = (\r\n  state: DefaultStateI = defaultState,\r\n  action: LoggedInUserInfoDispatchTypes\r\n): DefaultStateI => {\r\n  switch (action.type) {\r\n    case LOGGED_IN_USER_INFO_LOADING:\r\n      return { loading: true };\r\n    case LOGGED_IN_USER_INFO_SUCCESS:\r\n      return { loading: false, user: action.payload };\r\n    case LOGGED_IN_USER_INFO_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    case USER_LOGOUT:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userInfoReducer = (\r\n  state: DefaultStateI = defaultState,\r\n  action: UserInfoDispatchTypes\r\n): DefaultStateI => {\r\n  switch (action.type) {\r\n    case USER_INFO_LOADING:\r\n      return { loading: true };\r\n    case USER_INFO_SUCCESS:\r\n      return { loading: false, user: action.payload };\r\n    case USER_INFO_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    case USER_LOGOUT:\r\n      return {};\r\n    case USER_INFO_UPDATE_FOLLOWERS:\r\n      const newFollowerId = action.payload;\r\n      const index = state.user?.followers.indexOf(newFollowerId);\r\n      let updatedUser = { ...state.user } as LoggedInUserI;\r\n      if (index !== undefined && index > -1) {\r\n        updatedUser.followers?.splice(index, 1);\r\n      } else {\r\n        updatedUser.followers?.push(newFollowerId);\r\n      }\r\n      return { user: updatedUser };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userFollowReducer = (\r\n  state: DefaultStateI = {},\r\n  action: UserFollowDispatchTypes\r\n): DefaultStateI => {\r\n  switch (action.type) {\r\n    case USER_FOLLOW_LOADING:\r\n      return { loading: true };\r\n    case USER_FOLLOW_SUCCESS:\r\n      return { loading: false, success: true };\r\n    case USER_FOLLOW_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userFollowersReducer = (\r\n  state: DefaultFollowingFollowersListI = { users: [] },\r\n  action: UserFollowersDispatchTypes\r\n): DefaultFollowingFollowersListI => {\r\n  switch (action.type) {\r\n    case USER_FOLLOWERS_LOADING:\r\n      return { ...state, loading: true };\r\n    case USER_FOLLOWERS_SUCCESS:\r\n      return { loading: false, users: action.payload };\r\n    case USER_FOLLOWERS_FAIL:\r\n      return { ...state, loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userFollowingListReducer = (\r\n  state: DefaultFollowingFollowersListI = { users: [] },\r\n  action: UserFollowingListDispatchTypes\r\n): DefaultFollowingFollowersListI => {\r\n  switch (action.type) {\r\n    case USER_FOLLOWING_LIST_LOADING:\r\n      return { ...state, loading: true };\r\n    case USER_FOLLOWING_LIST_SUCCESS:\r\n      return { loading: false, users: action.payload };\r\n    case USER_FOLLOWING_LIST_FAIL:\r\n      return { ...state, loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport {\r\n  chatCreateReducer,\r\n  chatDetailsReducer,\r\n  chatListReducer,\r\n  chatUnreadListReducer,\r\n  chatUpdateReducer,\r\n} from './chatReducer';\r\nimport {\r\n  messageListReducer,\r\n  messageMarkAsReadReducer,\r\n  messageSendReducer,\r\n} from './messageReducer';\r\nimport {\r\n  notificationListReducer,\r\n  notificationMarkAsOpenedReducer,\r\n  notificationPopupListReducer,\r\n  notificationUnreadListReducer,\r\n} from './notificationReducer';\r\nimport {\r\n  postCreateReducer,\r\n  postDeleteReducer,\r\n  postDetailsReducer,\r\n  postLikeReducer,\r\n  postListReducer,\r\n  postUpdateReducer,\r\n} from './postReducer';\r\nimport { searchReducer } from './searchReducer';\r\nimport { socketChatRoomReducer, socketConnectReducer } from './socketReducer';\r\nimport { profilePicUploadReducer } from './uploadReducer';\r\nimport {\r\n  loggedInUserInfoReducer,\r\n  userAuthenticateReducer,\r\n  userFollowersReducer,\r\n  userFollowingListReducer,\r\n  userFollowReducer,\r\n  userInfoReducer,\r\n} from './userReducer';\r\n\r\nconst RootReducer = combineReducers({\r\n  userAuth: userAuthenticateReducer,\r\n  userInfo: userInfoReducer,\r\n  loggedInUserInfo: loggedInUserInfoReducer,\r\n  userFollow: userFollowReducer,\r\n  userFollowers: userFollowersReducer,\r\n  userFollowingList: userFollowingListReducer,\r\n  profilePicUpload: profilePicUploadReducer,\r\n  postList: postListReducer,\r\n  postDetails: postDetailsReducer,\r\n  postCreate: postCreateReducer,\r\n  postLike: postLikeReducer,\r\n  postDelete: postDeleteReducer,\r\n  postUpdate: postUpdateReducer,\r\n  search: searchReducer,\r\n  chatList: chatListReducer,\r\n  chatDetails: chatDetailsReducer,\r\n  chatCreate: chatCreateReducer,\r\n  chatUpdate: chatUpdateReducer,\r\n  chatUnreadList: chatUnreadListReducer,\r\n  messageList: messageListReducer,\r\n  messageSend: messageSendReducer,\r\n  messageMark: messageMarkAsReadReducer,\r\n  notificationList: notificationListReducer,\r\n  notificationUnreadList: notificationUnreadListReducer,\r\n  notificationPopupList: notificationPopupListReducer,\r\n  notificationMark: notificationMarkAsOpenedReducer,\r\n  socketConnect: socketConnectReducer,\r\n  socketChatRoom: socketChatRoomReducer,\r\n});\r\n\r\nexport default RootReducer;\r\n","import {\r\n  ProfilePicUploadDispatchTypes,\r\n  PROFILE_PIC_UPLOAD_FAIL,\r\n  PROFILE_PIC_UPLOAD_LOADING,\r\n  PROFILE_PIC_UPLOAD_SUCCESS,\r\n} from '../actions/upload/uploadActionTypes';\r\n\r\ninterface DefaultStateI {\r\n  loading?: boolean;\r\n  error?: string;\r\n  success?: boolean;\r\n}\r\nexport const profilePicUploadReducer = (\r\n  state: DefaultStateI = {},\r\n  action: ProfilePicUploadDispatchTypes\r\n): DefaultStateI => {\r\n  switch (action.type) {\r\n    case PROFILE_PIC_UPLOAD_LOADING:\r\n      return { loading: true };\r\n    case PROFILE_PIC_UPLOAD_SUCCESS:\r\n      return { loading: false, success: true };\r\n    case PROFILE_PIC_UPLOAD_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { PostInterface } from '../actions/post/postActionTypes';\r\nimport {\r\n  SearchDispatchTypes,\r\n  SEARCH_LOADING,\r\n  SEARCH_POSTS_SUCCESS,\r\n  SEARCH_RESET,\r\n  SEARCH_USERS_SUCCESS,\r\n} from '../actions/search/searchActionTypes';\r\nimport { UserType } from '../actions/user/userActionTypes';\r\n\r\ninterface DefaultStateI {\r\n  loading?: boolean;\r\n  posts: PostInterface[];\r\n  users: UserType[];\r\n  error?: string;\r\n}\r\n\r\nexport const searchReducer = (\r\n  state: DefaultStateI = { users: [], posts: [] },\r\n  action: SearchDispatchTypes\r\n): DefaultStateI => {\r\n  switch (action.type) {\r\n    case SEARCH_LOADING:\r\n      return { ...state, loading: true };\r\n    case SEARCH_POSTS_SUCCESS:\r\n      return { ...state, loading: false, posts: action.payload };\r\n    case SEARCH_USERS_SUCCESS:\r\n      return { ...state, loading: false, users: action.payload };\r\n    case SEARCH_RESET:\r\n      return { users: [], posts: [] };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  ChatCreateDispatchTypes,\r\n  ChatDetailsDispatchTypes,\r\n  ChatInterface,\r\n  ChatListDispatchTypes,\r\n  ChatUnreadListDispatchTypes,\r\n  ChatUpdateDispatchTypes,\r\n  CHAT_CREATE_FAIL,\r\n  CHAT_CREATE_LOADING,\r\n  CHAT_CREATE_SUCCESS,\r\n  CHAT_DETAILS_FAIL,\r\n  CHAT_DETAILS_LOADING,\r\n  CHAT_DETAILS_SUCCESS,\r\n  CHAT_LIST_FAIL,\r\n  CHAT_LIST_LOADING,\r\n  CHAT_LIST_SUCCESS,\r\n  CHAT_UNREAD_LIST_FAIL,\r\n  CHAT_UNREAD_LIST_LOADING,\r\n  CHAT_UNREAD_LIST_SUCCESS,\r\n  CHAT_UPDATE_FAIL,\r\n  CHAT_UPDATE_LOADING,\r\n  CHAT_UPDATE_SUCCESS,\r\n} from '../actions/chat/chatActionTypes';\r\n\r\ninterface DefaultStateI {\r\n  loading?: boolean;\r\n  error?: string;\r\n}\r\n\r\ninterface ChatListStateI extends DefaultStateI {\r\n  chats: ChatInterface[];\r\n}\r\n\r\ninterface ChatUnreadListStateI extends ChatListStateI {\r\n  chats: ChatInterface[];\r\n  totalCount: number;\r\n}\r\n\r\ninterface ChatDetailsStateI extends DefaultStateI {\r\n  chat?: ChatInterface;\r\n}\r\n\r\ninterface ChatCreateStateI extends DefaultStateI {\r\n  chat?: ChatInterface;\r\n  success?: boolean;\r\n}\r\n\r\ninterface ChatUpdateStateI extends DefaultStateI {\r\n  success?: boolean;\r\n}\r\n\r\nexport const chatListReducer = (\r\n  state: ChatListStateI = { chats: [] },\r\n  action: ChatListDispatchTypes\r\n): ChatListStateI => {\r\n  switch (action.type) {\r\n    case CHAT_LIST_LOADING:\r\n      return { ...state, loading: true };\r\n    case CHAT_LIST_SUCCESS:\r\n      return { loading: false, chats: action.payload };\r\n    case CHAT_LIST_FAIL:\r\n      return { ...state, loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const chatUnreadListReducer = (\r\n  state: ChatUnreadListStateI = { chats: [], totalCount: 0 },\r\n  action: ChatUnreadListDispatchTypes\r\n): ChatUnreadListStateI => {\r\n  switch (action.type) {\r\n    case CHAT_UNREAD_LIST_LOADING:\r\n      return { ...state, loading: true };\r\n    case CHAT_UNREAD_LIST_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        chats: action.payload,\r\n        totalCount: action.payload.length,\r\n      };\r\n    case CHAT_UNREAD_LIST_FAIL:\r\n      return { ...state, loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const chatDetailsReducer = (\r\n  state: ChatDetailsStateI = {},\r\n  action: ChatDetailsDispatchTypes\r\n): ChatDetailsStateI => {\r\n  switch (action.type) {\r\n    case CHAT_DETAILS_LOADING:\r\n      return { loading: true };\r\n    case CHAT_DETAILS_SUCCESS:\r\n      return { loading: false, chat: action.payload };\r\n    case CHAT_DETAILS_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const chatCreateReducer = (\r\n  state: ChatCreateStateI = {},\r\n  action: ChatCreateDispatchTypes\r\n): ChatCreateStateI => {\r\n  switch (action.type) {\r\n    case CHAT_CREATE_LOADING:\r\n      return { loading: true };\r\n    case CHAT_CREATE_SUCCESS:\r\n      return { loading: false, success: true, chat: action.payload };\r\n    case CHAT_CREATE_FAIL:\r\n      return { error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const chatUpdateReducer = (\r\n  state: ChatUpdateStateI = {},\r\n  action: ChatUpdateDispatchTypes\r\n): ChatCreateStateI => {\r\n  switch (action.type) {\r\n    case CHAT_UPDATE_LOADING:\r\n      return { loading: true };\r\n    case CHAT_UPDATE_SUCCESS:\r\n      return { loading: false, success: true };\r\n    case CHAT_UPDATE_FAIL:\r\n      return { error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  MessageSendDispatchTypes,\r\n  MessageInterface,\r\n  MESSAGE_SEND_LOADING,\r\n  MESSAGE_SEND_SUCCESS,\r\n  MESSAGE_SEND_FAIL,\r\n  MessageListDispatchTypes,\r\n  MESSAGE_LIST_LOADING,\r\n  MESSAGE_LIST_SUCCESS,\r\n  MESSAGE_LIST_FAIL,\r\n  MessageMarkAsReadDispatchTypes,\r\n  MESSAGE_MARK_AS_READ_LOADING,\r\n  MESSAGE_MARK_AS_READ_SUCCESS,\r\n  MESSAGE_MARK_AS_READ_FAIL,\r\n  MESSAGE_MARK_AS_READ_RESET,\r\n  MESSAGE_ADD_TO_LIST,\r\n} from '../actions/message/messageActionTypes';\r\n\r\ninterface DefaultStateI {\r\n  loading?: boolean;\r\n  error?: string;\r\n}\r\n\r\ninterface MessageListInterfaceI extends DefaultStateI {\r\n  messages: MessageInterface[];\r\n}\r\n\r\ninterface MessageSendStateI extends DefaultStateI {\r\n  success?: boolean;\r\n  message?: MessageInterface;\r\n  failedTextMessage?: string;\r\n}\r\n\r\ninterface MessageMarkAsReadStateI extends DefaultStateI {\r\n  success?: boolean;\r\n}\r\n\r\nexport const messageListReducer = (\r\n  state: MessageListInterfaceI = { messages: [] },\r\n  action: MessageListDispatchTypes\r\n): MessageListInterfaceI => {\r\n  let updatedMessages = [...state.messages];\r\n  const tempId = localStorage.getItem('messageId');\r\n  let messageIndex;\r\n  switch (action.type) {\r\n    case MESSAGE_LIST_LOADING:\r\n      return { ...state, loading: true };\r\n    case MESSAGE_LIST_SUCCESS:\r\n      return { loading: false, messages: action.payload };\r\n    case MESSAGE_LIST_FAIL:\r\n      return { ...state, loading: false, error: action.payload };\r\n    case MESSAGE_SEND_LOADING:\r\n      const newMessage = {\r\n        ...action.payload!,\r\n        _id: tempId,\r\n        readBy: [action.payload!.sender._id],\r\n        loading: true,\r\n      } as any;\r\n      updatedMessages.push(newMessage);\r\n      return { ...state, messages: updatedMessages };\r\n    case MESSAGE_SEND_SUCCESS:\r\n      updatedMessages.forEach((m) => (m.loading ? (m.loading = false) : null));\r\n      return { ...state, messages: updatedMessages };\r\n    case MESSAGE_SEND_FAIL:\r\n      messageIndex = state.messages.findIndex((m) => m._id === tempId);\r\n      updatedMessages.forEach((m) => (m.loading ? (m.loading = false) : null));\r\n      updatedMessages[messageIndex].error = 'failed';\r\n      return { ...state, messages: updatedMessages };\r\n    case MESSAGE_ADD_TO_LIST:\r\n      updatedMessages.push(action.payload);\r\n      return { ...state, messages: updatedMessages };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const messageSendReducer = (\r\n  state: MessageSendStateI = {},\r\n  action: MessageSendDispatchTypes\r\n): MessageSendStateI => {\r\n  switch (action.type) {\r\n    case MESSAGE_SEND_LOADING:\r\n      return { loading: true };\r\n    case MESSAGE_SEND_SUCCESS:\r\n      return { loading: false, success: true };\r\n    case MESSAGE_SEND_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload.error,\r\n        failedTextMessage: action.payload.failedTextMessage,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const messageMarkAsReadReducer = (\r\n  state: MessageMarkAsReadStateI = {},\r\n  action: MessageMarkAsReadDispatchTypes\r\n): MessageMarkAsReadStateI => {\r\n  switch (action.type) {\r\n    case MESSAGE_MARK_AS_READ_LOADING:\r\n      return { loading: true };\r\n    case MESSAGE_MARK_AS_READ_SUCCESS:\r\n      return { loading: false, success: true };\r\n    case MESSAGE_MARK_AS_READ_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    case MESSAGE_MARK_AS_READ_RESET:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { MessageInterface } from '../actions/message/messageActionTypes';\r\nimport {\r\n  NotificationInterface,\r\n  NotificationLatestDispatchTypes,\r\n  NotificationListDispatchTypes,\r\n  NotificationMarkAsOpenedDispatchTypes,\r\n  NotificationUnreadListDispatchTypes,\r\n  NOTIFICATION_LATEST_FAIL,\r\n  NOTIFICATION_LATEST_LOADING,\r\n  NOTIFICATION_LATEST_SUCCESS,\r\n  NOTIFICATION_LIST_FAIL,\r\n  NOTIFICATION_LIST_LOADING,\r\n  NOTIFICATION_LIST_SUCCESS,\r\n  NOTIFICATION_MARK_AS_OPENED_FAIL,\r\n  NOTIFICATION_MARK_AS_OPENED_LOADING,\r\n  NOTIFICATION_MARK_AS_OPENED_RESET,\r\n  NOTIFICATION_MARK_AS_OPENED_SUCCESS,\r\n  NOTIFICATION_POPUP_REMOVE,\r\n  NOTIFICATION_UNREAD_LIST_FAIL,\r\n  NOTIFICATION_UNREAD_LIST_LOADING,\r\n  NOTIFICATION_UNREAD_LIST_SUCCESS,\r\n} from '../actions/notification/notificationActionTypes';\r\n\r\ninterface DefaultStateI {\r\n  loading?: boolean;\r\n  error?: string;\r\n}\r\n\r\ninterface NotificationDefaultStateI extends DefaultStateI {\r\n  notifications: NotificationInterface[];\r\n}\r\n\r\ninterface NotificationUnreadDefaultStateI extends NotificationDefaultStateI {\r\n  totalCount: number;\r\n}\r\n\r\ninterface NotificationsPopupStateI extends DefaultStateI {\r\n  notifications: (NotificationInterface | MessageInterface)[];\r\n}\r\n\r\ninterface NotificationMarkDefaultStateI extends DefaultStateI {\r\n  success?: boolean;\r\n}\r\n\r\nexport const notificationListReducer = (\r\n  state: NotificationDefaultStateI = { notifications: [] },\r\n  action: NotificationListDispatchTypes\r\n): NotificationDefaultStateI => {\r\n  switch (action.type) {\r\n    case NOTIFICATION_LIST_LOADING:\r\n      return { ...state, loading: true };\r\n    case NOTIFICATION_LIST_SUCCESS:\r\n      return { loading: false, notifications: action.payload };\r\n    case NOTIFICATION_LIST_FAIL:\r\n      return { ...state, loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const notificationUnreadListReducer = (\r\n  state: NotificationUnreadDefaultStateI = { notifications: [], totalCount: 0 },\r\n  action: NotificationUnreadListDispatchTypes\r\n): NotificationUnreadDefaultStateI => {\r\n  switch (action.type) {\r\n    case NOTIFICATION_UNREAD_LIST_LOADING:\r\n      return { ...state, loading: true };\r\n    case NOTIFICATION_UNREAD_LIST_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        notifications: action.payload,\r\n        totalCount: action.payload.length,\r\n      };\r\n    case NOTIFICATION_UNREAD_LIST_FAIL:\r\n      return { ...state, loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const notificationPopupListReducer = (\r\n  state: NotificationsPopupStateI = { notifications: [] },\r\n  action: NotificationLatestDispatchTypes\r\n): NotificationsPopupStateI => {\r\n  let newList;\r\n  switch (action.type) {\r\n    case NOTIFICATION_LATEST_LOADING:\r\n      return { ...state, loading: true };\r\n    case NOTIFICATION_LATEST_SUCCESS:\r\n      newList = [...state.notifications];\r\n      newList.push(action.payload);\r\n      return { loading: false, notifications: newList };\r\n    case NOTIFICATION_LATEST_FAIL:\r\n      return { ...state, loading: false, error: action.payload };\r\n    case NOTIFICATION_POPUP_REMOVE:\r\n      newList = [...state.notifications];\r\n      newList.shift();\r\n      return { ...state, notifications: newList };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const notificationMarkAsOpenedReducer = (\r\n  state: NotificationMarkDefaultStateI = {},\r\n  action: NotificationMarkAsOpenedDispatchTypes\r\n): NotificationMarkDefaultStateI => {\r\n  switch (action.type) {\r\n    case NOTIFICATION_MARK_AS_OPENED_LOADING:\r\n      return { loading: true };\r\n    case NOTIFICATION_MARK_AS_OPENED_SUCCESS:\r\n      return { loading: false, success: true };\r\n    case NOTIFICATION_MARK_AS_OPENED_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    case NOTIFICATION_MARK_AS_OPENED_RESET:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  SocketChatRoomDispatchTypes,\r\n  SocketConnectDispatchTypes,\r\n  SOCKET_CHAT_ROOM_TYPING,\r\n  SOCKET_CHAT_ROOM_TYPING_RESET,\r\n  SOCKET_CONNECT,\r\n} from '../actions/socket/socketsActionsTypes';\r\n\r\ninterface SocketInterface {\r\n  isConnected?: boolean;\r\n}\r\n\r\ninterface SocketChatRoomInterface {\r\n  isTyping?: boolean;\r\n  room?: string;\r\n}\r\n\r\nexport const socketConnectReducer = (\r\n  state: SocketInterface = {},\r\n  action: SocketConnectDispatchTypes\r\n): SocketInterface => {\r\n  switch (action.type) {\r\n    case SOCKET_CONNECT:\r\n      return { isConnected: action.payload.isConnected };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const socketChatRoomReducer = (\r\n  state: SocketChatRoomInterface = {},\r\n  action: SocketChatRoomDispatchTypes\r\n): SocketChatRoomInterface => {\r\n  switch (action.type) {\r\n    case SOCKET_CHAT_ROOM_TYPING:\r\n      return { isTyping: action.payload.isTyping, room: action.payload.room };\r\n    case SOCKET_CHAT_ROOM_TYPING_RESET:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\r\nimport thunk from 'redux-thunk';\r\nimport { LoggedInUserI } from './actions/user/userActionTypes';\r\nimport RootReducer from './reducers/rootReducer';\r\n\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst userInfoFromStorage: LoggedInUserI = localStorage.getItem('userInfo')\r\n  ? JSON.parse(localStorage.getItem('userInfo')!)\r\n  : null;\r\n\r\nconst initialState = { userAuth: { user: userInfoFromStorage } };\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport type RootStore = ReturnType<typeof RootReducer>;\r\n\r\nexport default store;\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  USER_INFO_LOADING,\r\n  USER_INFO_SUCCESS,\r\n  USER_INFO_FAIL,\r\n  UserInfoDispatchTypes,\r\n  UserLogoutDispatchTypes,\r\n  USER_LOGOUT,\r\n  RegisterUserDataType,\r\n  LoginUserDataType,\r\n  UserFollowDispatchTypes,\r\n  USER_FOLLOW_FAIL,\r\n  LoggedInUserInfoDispatchTypes,\r\n  LOGGED_IN_USER_INFO_LOADING,\r\n  LOGGED_IN_USER_INFO_SUCCESS,\r\n  LOGGED_IN_USER_INFO_FAIL,\r\n  UserAuthenticateDispatchTypes,\r\n  USER_AUTHENTICATE_LOADING,\r\n  USER_AUTHENTICATE_SUCCESS,\r\n  USER_AUTHENTICATE_FAIL,\r\n  UPDATE_AUTH_USER,\r\n  USER_INFO_UPDATE_FOLLOWERS,\r\n  UserFollowersDispatchTypes,\r\n  USER_FOLLOWERS_LOADING,\r\n  USER_FOLLOWERS_SUCCESS,\r\n  USER_FOLLOWERS_FAIL,\r\n  UserFollowingListDispatchTypes,\r\n  USER_FOLLOWING_LIST_LOADING,\r\n  USER_FOLLOWING_LIST_SUCCESS,\r\n  USER_FOLLOWING_LIST_FAIL,\r\n} from './userActionTypes';\r\n\r\nimport * as api from '../../../api/index';\r\nimport { getApiErrorMessage } from '../../../utils/errorMessage';\r\nimport { emitNewNotificationSocket } from '../socket/socketActions';\r\n\r\ntype AuthType = 'login' | 'register';\r\n\r\nexport const authenticateUser = (\r\n  formData: LoginUserDataType | RegisterUserDataType,\r\n  type: AuthType\r\n) => {\r\n  return async (dispatch: Dispatch<UserAuthenticateDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: USER_AUTHENTICATE_LOADING });\r\n\r\n      let resData;\r\n      if (type === 'login') {\r\n        resData = await api.loginUser(formData);\r\n      } else {\r\n        resData = await api.registerUser(formData as RegisterUserDataType);\r\n      }\r\n\r\n      const data = resData.data;\r\n\r\n      dispatch({ type: USER_AUTHENTICATE_SUCCESS, payload: data });\r\n      dispatch({ type: LOGGED_IN_USER_INFO_SUCCESS, payload: data });\r\n\r\n      localStorage.setItem('userInfo', JSON.stringify(data));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: USER_AUTHENTICATE_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getLoggedInUserInfo = () => {\r\n  return async (dispatch: Dispatch<LoggedInUserInfoDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: LOGGED_IN_USER_INFO_LOADING });\r\n\r\n      const { data } = await api.getLoggedInUserInfo();\r\n\r\n      dispatch({ type: LOGGED_IN_USER_INFO_SUCCESS, payload: data });\r\n      dispatch({ type: UPDATE_AUTH_USER, payload: data });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: LOGGED_IN_USER_INFO_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getUserInfoById = (id: string) => {\r\n  return async (dispatch: Dispatch<UserInfoDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: USER_INFO_LOADING });\r\n\r\n      const { data } = await api.getUserInfoById(id);\r\n\r\n      dispatch({ type: USER_INFO_SUCCESS, payload: data });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: USER_INFO_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const followUser = (id: string, updateUserInfo?: boolean) => {\r\n  return async (dispatch: Dispatch<UserFollowDispatchTypes>) => {\r\n    try {\r\n      const { data } = await api.followUser(id);\r\n\r\n      dispatch({ type: UPDATE_AUTH_USER, payload: data });\r\n      dispatch({ type: LOGGED_IN_USER_INFO_SUCCESS, payload: data });\r\n      if (updateUserInfo) {\r\n        dispatch({ type: USER_INFO_UPDATE_FOLLOWERS, payload: data._id });\r\n      }\r\n\r\n      emitNewNotificationSocket(id);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: USER_FOLLOW_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getUserFollowers = (id: string) => {\r\n  return async (dispatch: Dispatch<UserFollowersDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: USER_FOLLOWERS_LOADING });\r\n\r\n      const { data } = await api.getUserFollowers(id);\r\n\r\n      dispatch({ type: USER_FOLLOWERS_SUCCESS, payload: data.followers });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: USER_FOLLOWERS_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getUserFollowing = (id: string) => {\r\n  return async (dispatch: Dispatch<UserFollowingListDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: USER_FOLLOWING_LIST_LOADING });\r\n\r\n      const { data } = await api.getUserFollowng(id);\r\n\r\n      dispatch({ type: USER_FOLLOWING_LIST_SUCCESS, payload: data.following });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: USER_FOLLOWING_LIST_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  return (dispatch: Dispatch<UserLogoutDispatchTypes>) => {\r\n    localStorage.removeItem('userInfo');\r\n\r\n    dispatch({ type: USER_LOGOUT });\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport * as userActions from '../../store/actions/user/userActions';\r\nimport { RootStore } from '../../store/store';\r\n\r\nimport './navBar.scss';\r\n\r\nconst NavBar = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const state = useSelector((state: RootStore) => state);\r\n\r\n  const notificationUnreadListState = state.notificationUnreadList;\r\n  const { totalCount: notificationCount } = notificationUnreadListState;\r\n  const chatUnreadListState = state.chatUnreadList;\r\n  const { totalCount: messageCount } = chatUnreadListState;\r\n\r\n  const logoutHandler = () => {\r\n    dispatch(userActions.logoutUser());\r\n  };\r\n\r\n  return (\r\n    <div className='nav'>\r\n      <Link to='/' className='nav-link blue'>\r\n        <i className='fas fa-dove'></i>\r\n      </Link>\r\n      <Link to='/' className='nav-link'>\r\n        <i className='fas fa-home'></i>\r\n      </Link>\r\n      <Link to='/search/posts' className='nav-link'>\r\n        <i className='fas fa-search'></i>\r\n      </Link>\r\n      <Link to='/notifications' className='nav-link'>\r\n        <i className='fas fa-bell'></i>\r\n        {notificationCount > 0 && (\r\n          <span id='notificationsBadge'>{notificationCount}</span>\r\n        )}\r\n      </Link>\r\n      <Link to='/messages' className='nav-link'>\r\n        <i className='fas fa-envelope'></i>\r\n        {messageCount > 0 && <span id='messagesBadge'>{messageCount}</span>}\r\n      </Link>\r\n      <Link to='/profile' className='nav-link'>\r\n        <i className='fas fa-user'></i>\r\n      </Link>\r\n      <Link to='/login' className='nav-link' onClick={logoutHandler}>\r\n        <i className='fas fa-sign-out-alt'></i>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { NotificationInterface } from '../../store/actions/notification/notificationActionTypes';\r\nimport ResultListItem from '../list/resultListItem/ResultListItem';\r\nimport { getNotificationText, getNotificationUrl } from './helper';\r\n\r\nimport * as notificationActions from '../../store/actions/notification/notificationActions';\r\n\r\ninterface NotificationProps {\r\n  notification: NotificationInterface;\r\n}\r\n\r\nconst Notification: React.FC<NotificationProps> = ({ notification }) => {\r\n  const { _id: notificationId, userFrom, opened } = notification;\r\n\r\n  const notificationText = getNotificationText(notification);\r\n  const linkTo = getNotificationUrl(notification);\r\n  const className = opened ? '' : 'active';\r\n\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const clickHandler = (e: React.MouseEvent<HTMLAnchorElement>) => {\r\n    if (!opened) {\r\n      e.preventDefault();\r\n\r\n      const callBack = () => {\r\n        history.push(linkTo);\r\n      };\r\n\r\n      dispatch(\r\n        notificationActions.markNotificationsAsOpened(notificationId, callBack)\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ResultListItem\r\n      linkTo={linkTo}\r\n      imageUrls={[userFrom.profilePic]}\r\n      listText={notificationText}\r\n      containerClassName={className}\r\n      onItemClick={clickHandler}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","import { NotificationInterface } from '../../store/actions/notification/notificationActionTypes';\r\n\r\nexport const getNotificationText = (notification: NotificationInterface) => {\r\n  const { userFrom, notificationType } = notification;\r\n\r\n  if (!userFrom.firstName || !userFrom.lastName) {\r\n    alert('User from data not populated');\r\n    return '';\r\n  }\r\n\r\n  const userFromName = `${userFrom.firstName} ${userFrom.lastName}`;\r\n\r\n  let text = '';\r\n\r\n  switch (notificationType) {\r\n    case 'retweet':\r\n      text = `${userFromName} retweeted one of your posts`;\r\n      break;\r\n    case 'postLike':\r\n      text = `${userFromName} liked one of your posts`;\r\n      break;\r\n    case 'reply':\r\n      text = `${userFromName} replied to one of your posts`;\r\n      break;\r\n    case 'follow':\r\n      text = `${userFromName} followed you`;\r\n  }\r\n\r\n  return text;\r\n};\r\n\r\nexport const getNotificationUrl = (\r\n  notification: NotificationInterface\r\n): string => {\r\n  let url = '#';\r\n\r\n  const { notificationType, entityId } = notification;\r\n\r\n  switch (notificationType) {\r\n    case 'retweet':\r\n    case 'postLike':\r\n    case 'reply':\r\n      url = `/post/${entityId}`;\r\n      break;\r\n    case 'follow':\r\n      url = `/profile/${entityId}`;\r\n  }\r\n\r\n  return url;\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './titleBar.scss';\r\n\r\ntype PropsType = {\r\n  title: string;\r\n  headerBtnIcon?: string;\r\n  link?: string;\r\n  onBtnClick?: () => void;\r\n};\r\n\r\nconst TitleBar: React.FC<PropsType> = ({\r\n  title,\r\n  headerBtnIcon,\r\n  link,\r\n  onBtnClick,\r\n}: PropsType) => {\r\n  return (\r\n    <div className='titleContainer'>\r\n      <h1>{title}</h1>\r\n      {headerBtnIcon &&\r\n        (link ? (\r\n          <Link to={link}>\r\n            <i className={headerBtnIcon}></i>\r\n          </Link>\r\n        ) : (\r\n          <button className='headerButton' onClick={onBtnClick}>\r\n            <i className={headerBtnIcon}></i>\r\n          </button>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TitleBar;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Chat from '../components/chat/Chat';\r\nimport NavBar from '../components/navBar/NavBar';\r\nimport Notification from '../components/notification/Notification';\r\nimport TitleBar from '../components/titleBar/TitleBar';\r\nimport { MessageInterface } from '../store/actions/message/messageActionTypes';\r\nimport {\r\n  NotificationInterface,\r\n  NOTIFICATION_POPUP_REMOVE,\r\n} from '../store/actions/notification/notificationActionTypes';\r\nimport { RootStore } from '../store/store';\r\nimport './mainLayout.scss';\r\n\r\ninterface MainLayoutProps {\r\n  children: React.FC;\r\n  pageTitle?: string;\r\n}\r\n\r\nconst POPUP_SHOW_TIME = 5000;\r\n\r\nconst MainLayout: React.FC<MainLayoutProps> = ({ children, pageTitle }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const state = useSelector((state: RootStore) => state);\r\n\r\n  const notificationPopupListState = state.notificationPopupList;\r\n  const { notifications } = notificationPopupListState;\r\n\r\n  useEffect(() => {\r\n    if (notifications.length > 0) {\r\n      setTimeout(() => {\r\n        dispatch({ type: NOTIFICATION_POPUP_REMOVE });\r\n      }, POPUP_SHOW_TIME);\r\n    }\r\n  }, [notifications, dispatch]);\r\n\r\n  return (\r\n    <div className='wrapper'>\r\n      <div className='row'>\r\n        <nav className='col-2'>\r\n          <NavBar />\r\n        </nav>\r\n        <div className='mainSectionContainer col-10 col-md-8'>\r\n          {pageTitle && <TitleBar title={pageTitle} />}\r\n          {children}\r\n        </div>\r\n\r\n        <div id='notificationPopupList'>\r\n          {notifications.length > 0 &&\r\n            notifications.map((n: any) => {\r\n              let data;\r\n              if ((n as NotificationInterface).notificationType) {\r\n                data = n;\r\n                return <Notification key={data._id} notification={data} />;\r\n              } else if ((n as MessageInterface).content) {\r\n                data = n;\r\n                return (\r\n                  <Chat key={data._id} chat={data.chat} latestMessage={data} />\r\n                );\r\n              } else {\r\n                return null;\r\n              }\r\n            })}\r\n        </div>\r\n\r\n        <div className='d-none d-md-block col-md-2'></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","import { Dispatch } from 'react';\r\nimport {\r\n  PostCreateDispatchTypes,\r\n  PostDeleteDispatchTypes,\r\n  PostDetailsDispatchTypes,\r\n  PostInterface,\r\n  PostLikeDispatchTypes,\r\n  PostListDispatchTypes,\r\n  PostRetweetDispatchType,\r\n  PostUpdateDispatchTypes,\r\n  POST_CREATE_FAIL,\r\n  POST_CREATE_LOADING,\r\n  POST_CREATE_SUCCESS,\r\n  POST_DELETE_FAIL,\r\n  POST_DELETE_LOADING,\r\n  POST_DELETE_SUCCESS,\r\n  POST_DETAILS_FAIL,\r\n  POST_DETAILS_LOADING,\r\n  POST_DETAILS_SUCCESS,\r\n  POST_LIKE_FAIL,\r\n  POST_LIKE_LOADING,\r\n  POST_LIKE_SUCCESS,\r\n  POST_LIST_FAIL,\r\n  POST_LIST_LOADING,\r\n  POST_LIST_SUCCESS,\r\n  POST_LIST_UPDATE_ONLIKE,\r\n  POST_RETWEET,\r\n  POST_UPDATE_FAIL,\r\n  POST_UPDATE_LOADING,\r\n  POST_UPDATE_SUCCESS,\r\n} from './postActionTypes';\r\n\r\nimport { RootStore } from '../../store';\r\n\r\nimport * as api from '../../../api/index';\r\nimport { getApiErrorMessage } from '../../../utils/errorMessage';\r\nimport { emitNewNotificationSocket } from '../socket/socketActions';\r\n\r\nexport const listPosts = (userId?: string, isReply?: boolean) => {\r\n  return async (dispatch: Dispatch<PostListDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: POST_LIST_LOADING });\r\n\r\n      let res;\r\n      if (userId && isReply) {\r\n        res = await api.fetchUserPostReplies(userId);\r\n      } else if (userId) {\r\n        res = await api.fetchUserPosts(userId);\r\n      } else {\r\n        res = await api.fetchPosts();\r\n      }\r\n\r\n      const { data } = res;\r\n\r\n      dispatch({ type: POST_LIST_SUCCESS, payload: data });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: POST_LIST_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getPostDetails = (id: string) => {\r\n  return async (dispatch: Dispatch<PostDetailsDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: POST_DETAILS_LOADING });\r\n\r\n      const { data } = await api.fetchPostDetails(id);\r\n\r\n      dispatch({ type: POST_DETAILS_SUCCESS, payload: data });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: POST_DETAILS_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const createPost = (postData: { content: string; replyTo?: string }) => {\r\n  return async (dispatch: Dispatch<PostCreateDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: POST_CREATE_LOADING });\r\n\r\n      const { data } = await api.createPost(postData);\r\n\r\n      dispatch({ type: POST_CREATE_SUCCESS, payload: data });\r\n\r\n      if (data.replyTo) {\r\n        emitNewNotificationSocket(data.replyTo.postedBy);\r\n        console.log('Emitting Notification');\r\n      }\r\n    } catch (err) {\r\n      dispatch({\r\n        type: POST_CREATE_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const likePost = (id: string, retweetId: string | null) => {\r\n  return async (\r\n    dispatch: Dispatch<PostLikeDispatchTypes>,\r\n    getState: () => RootStore\r\n  ) => {\r\n    try {\r\n      dispatch({ type: POST_LIKE_LOADING });\r\n\r\n      const loggedInUserId = getState().loggedInUserInfo.user!._id;\r\n\r\n      const { data } = await api.likePost(id);\r\n\r\n      dispatch({\r\n        type: POST_LIST_UPDATE_ONLIKE,\r\n        payload: { data, retweetId },\r\n      });\r\n\r\n      dispatch({ type: POST_LIKE_SUCCESS, payload: data });\r\n\r\n      if (data.likes.includes(loggedInUserId)) {\r\n        emitNewNotificationSocket(data.postedBy._id);\r\n      }\r\n    } catch (err) {\r\n      dispatch({\r\n        type: POST_LIKE_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const retweetPost = (id: string, retweetId: string | null) => {\r\n  return async (\r\n    dispatch: Dispatch<PostRetweetDispatchType>,\r\n    getState: () => RootStore\r\n  ) => {\r\n    try {\r\n      const { data } = await api.retweetPost(id);\r\n\r\n      dispatch({ type: POST_RETWEET, payload: { data, retweetId } });\r\n\r\n      const loggedInUserId = getState().loggedInUserInfo.user!._id;\r\n\r\n      if (data.retweetUsers.includes(loggedInUserId)) {\r\n        emitNewNotificationSocket(data.postedBy._id);\r\n      }\r\n    } catch (err) {\r\n      console.log(\r\n        err.response && err.response.data.message\r\n          ? err.response.data.message\r\n          : err.message\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport const deletePost = (id: string) => {\r\n  return async (dispatch: Dispatch<PostDeleteDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: POST_DELETE_LOADING });\r\n\r\n      const {\r\n        data: { message },\r\n      } = await api.deletePost(id);\r\n\r\n      dispatch({ type: POST_DELETE_SUCCESS, payload: message });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: POST_DELETE_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updatePost = (id: string, data: Partial<PostInterface>) => {\r\n  return async (dispatch: Dispatch<PostUpdateDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: POST_UPDATE_LOADING });\r\n\r\n      const {\r\n        data: { message },\r\n      } = await api.updatePost(id, data);\r\n\r\n      dispatch({ type: POST_UPDATE_SUCCESS, payload: message });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: POST_UPDATE_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n","import React from 'react';\r\n\r\nimport './profileImage.scss';\r\n\r\ntype ProfileImageProps = { uri: string };\r\n\r\nconst ProfileImage: React.FC<ProfileImageProps> = ({ uri }) => {\r\n  return (\r\n    <div className='userImageContainer'>\r\n      <img src={`${uri}`} alt='Profile Pic' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileImage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport * as postActions from '../../store/actions/post/postActions';\r\nimport ProfileImage from '../image/ProfileImage';\r\n\r\nimport './postForm.scss';\r\n\r\ntype PropsType = {\r\n  imageUrl: string;\r\n  creating: boolean | undefined;\r\n  createSuccess: boolean | undefined;\r\n  error: string | undefined;\r\n};\r\n\r\nconst PostForm: React.FC<PropsType> = ({\r\n  imageUrl,\r\n  creating,\r\n  error,\r\n  createSuccess,\r\n}) => {\r\n  const [post, setPost] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const submitPostHandler = () => {\r\n    if (post.trim().length < 1) {\r\n      alert('Please enter some text');\r\n      return;\r\n    }\r\n    dispatch(postActions.createPost({ content: post }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (createSuccess) {\r\n      setPost('');\r\n    }\r\n  }, [createSuccess]);\r\n\r\n  return (\r\n    <div className='postFormContainer'>\r\n      <ProfileImage uri={imageUrl} />\r\n      <div className='textAreaContainer'>\r\n        <textarea\r\n          id='postTextarea'\r\n          placeholder=\"What's happening?\"\r\n          value={post}\r\n          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\r\n            setPost(e.target.value)\r\n          }\r\n        />\r\n        {error && <p>{error}</p>}\r\n        <div className='buttonsContainer'>\r\n          <button\r\n            id='submitPostButton'\r\n            disabled={post.trim().length < 1}\r\n            onClick={submitPostHandler}\r\n          >\r\n            {creating ? '....' : 'Post'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","import React from 'react';\r\n\r\nimport './fallbackMessage.scss';\r\n\r\ninterface FallBackMessageProps {\r\n  type?: 'error' | 'success' | 'no-content';\r\n  message?: string;\r\n}\r\nconst FallBackMessage: React.FC<FallBackMessageProps> = ({\r\n  message = 'Nothing to show',\r\n}) => {\r\n  return (\r\n    <div className='fallbackMessage'>\r\n      <span className='fallbackText'>{message}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FallBackMessage;\r\n","import React from 'react';\r\n\r\nimport './loadingSpinner.scss';\r\n\r\nconst LoadingSpinner: React.FC = () => {\r\n  return (\r\n    <div className='loadingSpinnerContainer'>\r\n      <img src='/images/loadingSpinner.gif' alt='Loading...' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\ninterface PostReplyProps {\r\n  show: boolean;\r\n  title: string;\r\n  actionBtnText: string;\r\n  cancelBtnText: string;\r\n  loadingSave?: boolean;\r\n  error?: string;\r\n  submitHandler: () => void;\r\n  handleClose: () => void;\r\n}\r\n\r\nconst ModalLayout: React.FC<PostReplyProps> = ({\r\n  show,\r\n  title,\r\n  actionBtnText,\r\n  cancelBtnText,\r\n  children,\r\n  loadingSave,\r\n  error,\r\n  submitHandler,\r\n  handleClose,\r\n}) => {\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        onClick={(e: React.MouseEvent<HTMLElement>) => e.stopPropagation()}\r\n        className='modal'\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{title}</Modal.Title>\r\n          {error && <p>{error}</p>}\r\n        </Modal.Header>\r\n        <Modal.Body>{children}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant='secondary' onClick={handleClose}>\r\n            {cancelBtnText}\r\n          </Button>\r\n          <Button variant='primary' onClick={submitHandler}>\r\n            {loadingSave ? '....' : actionBtnText}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nModalLayout.defaultProps = {\r\n  actionBtnText: 'Save Changes',\r\n  cancelBtnText: 'Close',\r\n};\r\n\r\nexport default ModalLayout;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootStore } from '../../store/store';\r\nimport ProfileImage from '../image/ProfileImage';\r\n\r\nimport * as postActions from '../../store/actions/post/postActions';\r\n\r\nimport './modal.scss';\r\nimport Post from '../post/Post';\r\nimport ModalLayout from './ModalLayout';\r\n\r\ninterface PostReplyProps {\r\n  postId: string;\r\n}\r\n\r\nconst PostReplyModal: React.FC<PostReplyProps> = ({ postId }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [replyText, setReplyText] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const userAuthState = useSelector((state: RootStore) => state.userAuth);\r\n  const { user } = userAuthState;\r\n\r\n  const posts = useSelector((state: RootStore) => state.postList.posts);\r\n  const post = posts.find((p) => p._id === postId);\r\n\r\n  const postCreateState = useSelector((state: RootStore) => state.postCreate);\r\n  const {\r\n    success,\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n  } = postCreateState;\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      handleClose();\r\n    }\r\n  }, [success]);\r\n\r\n  const openModalHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.stopPropagation();\r\n    handleShow();\r\n  };\r\n\r\n  const submitReplyHandler = () => {\r\n    dispatch(\r\n      postActions.createPost({\r\n        content: replyText,\r\n        replyTo: postId,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={openModalHandler}>\r\n        <i className='far fa-comment'></i>\r\n      </button>\r\n\r\n      <ModalLayout\r\n        show={show}\r\n        title='Reply'\r\n        actionBtnText='Reply'\r\n        cancelBtnText='Cancel'\r\n        loadingSave={loadingCreate}\r\n        error={errorCreate}\r\n        submitHandler={submitReplyHandler}\r\n        handleClose={handleClose}\r\n      >\r\n        {post ? <Post post={post} userId={user!._id} /> : <p>Post not found</p>}\r\n        <div className='postFormContainer'>\r\n          <ProfileImage uri={user!.profilePic} />\r\n          <div className='textAreaContainer'>\r\n            <textarea\r\n              id='postTextarea'\r\n              placeholder=\"What's happening?\"\r\n              value={replyText}\r\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\r\n                setReplyText(e.target.value)\r\n              }\r\n            />\r\n          </div>\r\n        </div>\r\n      </ModalLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostReplyModal;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport * as postActions from '../../store/actions/post/postActions';\r\n\r\nimport './modal.scss';\r\nimport ModalLayout from './ModalLayout';\r\n\r\ninterface PostReplyProps {\r\n  postId: string;\r\n}\r\n\r\nconst PostReplyModal: React.FC<PostReplyProps> = ({ postId }) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const openModalHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.stopPropagation();\r\n    handleShow();\r\n  };\r\n\r\n  const deleteHandler = () => {\r\n    dispatch(postActions.deletePost(postId));\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={openModalHandler}>\r\n        <i className='fas fa-times'></i>\r\n      </button>\r\n\r\n      <ModalLayout\r\n        show={show}\r\n        title='Delete the post?'\r\n        actionBtnText='Delete'\r\n        cancelBtnText='Close'\r\n        loadingSave={false}\r\n        submitHandler={deleteHandler}\r\n        handleClose={handleClose}\r\n      >\r\n        You won't be able to delete this.\r\n      </ModalLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostReplyModal;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport * as postActions from '../../store/actions/post/postActions';\r\n\r\nimport './modal.scss';\r\nimport ModalLayout from './ModalLayout';\r\n\r\ninterface PinPostProps {\r\n  postId: string;\r\n  isPinned: boolean;\r\n}\r\n\r\nconst PinPostModal: React.FC<PinPostProps> = ({ postId, isPinned }) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const openModalHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.stopPropagation();\r\n    handleShow();\r\n  };\r\n\r\n  const pinPostHandler = () => {\r\n    dispatch(postActions.updatePost(postId, { pinned: !isPinned }));\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        className={`pinButton ${isPinned && 'active'}`}\r\n        onClick={openModalHandler}\r\n      >\r\n        <i className='fas fa-thumbtack'></i>\r\n      </button>\r\n\r\n      <ModalLayout\r\n        show={show}\r\n        title={isPinned ? 'Unpin the post?' : 'Pin this post?'}\r\n        actionBtnText={isPinned ? 'Unpin' : 'Pin'}\r\n        cancelBtnText='Close'\r\n        loadingSave={false}\r\n        submitHandler={pinPostHandler}\r\n        handleClose={handleClose}\r\n      >\r\n        {isPinned\r\n          ? 'This post will be unpinned'\r\n          : 'This post will appear at the top of your profile. You can only pin one post'}\r\n      </ModalLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PinPostModal;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { PostInterface } from '../../store/actions/post/postActionTypes';\r\nimport { timeDifference } from '../../utils/timeDifference';\r\nimport ProfileImage from '../image/ProfileImage';\r\nimport * as postActions from '../../store/actions/post/postActions';\r\n\r\nimport PostReplyModal from '../modals/PostReplyModal';\r\nimport PostDelteModal from '../modals/PostDeleteModal';\r\n\r\nimport './post.scss';\r\nimport PinPostModal from '../modals/PinPostModal';\r\n\r\ninterface PostProps {\r\n  post: PostInterface;\r\n  userId: string;\r\n  largeFont?: boolean;\r\n}\r\n\r\nconst Post: React.FC<PostProps> = ({ post, userId, largeFont }) => {\r\n  const isRetweet = post.retweetData;\r\n  const retweetedBy = isRetweet ? post.postedBy.userName : null;\r\n  const isReply = post.replyTo;\r\n  const replyingTo = isReply ? post.replyTo?.postedBy?.userName : null;\r\n  const retweetId = isRetweet ? post._id : null; //Track this ID to update right Component in UI otherwise the component with original tweet will be updated incase of liking and tweeting.\r\n  const originalPost = post.retweetData || post;\r\n  const {\r\n    postedBy,\r\n    content,\r\n    createdAt,\r\n    _id: postId,\r\n    likes,\r\n    retweetUsers,\r\n    pinned,\r\n  } = originalPost;\r\n\r\n  const isLoggedInUserPost = userId === postedBy._id;\r\n\r\n  const displayName = postedBy.firstName + ' ' + postedBy.lastName;\r\n  const timeStamp = timeDifference(new Date(), new Date(createdAt));\r\n\r\n  const likeButtonActiveClass = likes?.includes(userId) ? 'active-red' : '';\r\n  const retweetButtonActiveClass = retweetUsers.includes(userId)\r\n    ? 'active-green'\r\n    : '';\r\n  const largeFontClass = largeFont ? 'largeFont' : '';\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const numOfLikes = likes?.length || '';\r\n  const numOfRetweets = retweetUsers.length || '';\r\n\r\n  const stopPropagation = (e: React.MouseEvent<HTMLElement>) => {\r\n    e.stopPropagation();\r\n  };\r\n\r\n  const postLikeHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.stopPropagation();\r\n    dispatch(postActions.likePost(postId, retweetId));\r\n  };\r\n\r\n  const postRetweetHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.stopPropagation();\r\n    dispatch(postActions.retweetPost(postId, retweetId));\r\n  };\r\n\r\n  const postClickHandler = () => {\r\n    history.push(`/post/${post._id}`);\r\n  };\r\n\r\n  return (\r\n    <div className={`post ${largeFontClass}`} onClick={postClickHandler}>\r\n      {retweetedBy && (\r\n        <div className='postActionContainer'>\r\n          <span>\r\n            <i className='fas fa-retweet '></i> Retweeted by @\r\n            <Link to='#'>{retweetedBy}</Link>\r\n          </span>\r\n        </div>\r\n      )}\r\n      <div className='mainContentContainer'>\r\n        <ProfileImage uri={postedBy.profilePic} />\r\n        <div className='postContentContainer'>\r\n          {pinned && (\r\n            <div className='pinnedPostText'>\r\n              <i className='fas fa-thumbtack'></i> <span> Pinned post</span>{' '}\r\n            </div>\r\n          )}\r\n          <div className='header'>\r\n            <div className='headerContents'>\r\n              <Link\r\n                to={`/profile/${postedBy.userName}`}\r\n                className='displayName'\r\n                onClick={stopPropagation}\r\n              >\r\n                {displayName}\r\n              </Link>\r\n              <span className='username'> @{postedBy.userName}</span>\r\n              <span className='date'> {timeStamp}</span>\r\n            </div>\r\n            {isLoggedInUserPost && (\r\n              <div className='headerButtons'>\r\n                <PinPostModal postId={postId} isPinned={pinned} />\r\n                <PostDelteModal postId={postId} />\r\n              </div>\r\n            )}\r\n          </div>\r\n          {replyingTo && (\r\n            <div className='replyFlag'>\r\n              Replying to <Link to='#'>@{replyingTo}</Link>{' '}\r\n            </div>\r\n          )}\r\n          <div className='postBody'>\r\n            <span>{content}</span>\r\n          </div>\r\n          <div className='postFooter'>\r\n            <div className='postButtonContainer'>\r\n              <PostReplyModal postId={postId} />\r\n            </div>\r\n            <div className='postButtonContainer'>\r\n              <button className={`${retweetButtonActiveClass}`}>\r\n                <i\r\n                  onClick={postRetweetHandler}\r\n                  className='fas fa-retweet green'\r\n                ></i>\r\n                <span>{numOfRetweets}</span>\r\n              </button>\r\n            </div>\r\n            <div className='postButtonContainer'>\r\n              <button className={`likeButton ${likeButtonActiveClass}`}>\r\n                <i onClick={postLikeHandler} className='far fa-heart red'></i>\r\n                <span>{numOfLikes}</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","export const timeDifference = (current: Date, previous: Date): string => {\r\n  var msPerMinute = 60 * 1000;\r\n  var msPerHour = msPerMinute * 60;\r\n  var msPerDay = msPerHour * 24;\r\n  var msPerMonth = msPerDay * 30;\r\n  var msPerYear = msPerDay * 365;\r\n\r\n  var elapsed = current.getTime() - previous.getTime();\r\n\r\n  if (elapsed < msPerMinute) {\r\n    if (elapsed / 1000 < 30) {\r\n      return 'Just now';\r\n    }\r\n    return Math.round(elapsed / 1000) + ' seconds ago';\r\n  } else if (elapsed < msPerHour) {\r\n    return Math.round(elapsed / msPerMinute) + ' minutes ago';\r\n  } else if (elapsed < msPerDay) {\r\n    return Math.round(elapsed / msPerHour) + ' hours ago';\r\n  } else if (elapsed < msPerMonth) {\r\n    return Math.round(elapsed / msPerDay) + ' days ago';\r\n  } else if (elapsed < msPerYear) {\r\n    return Math.round(elapsed / msPerMonth) + ' months ago';\r\n  } else {\r\n    return Math.round(elapsed / msPerYear) + ' years ago';\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nimport { PostInterface } from '../../store/actions/post/postActionTypes';\r\nimport FallBackMessage from '../fallbackMessage/FallbackMessage';\r\nimport LoadingSpinner from '../loadingSpinner/LoadSpinner';\r\nimport Post from './Post';\r\n\r\ninterface postListProps {\r\n  posts: PostInterface[];\r\n  userId: string;\r\n  loading?: boolean;\r\n}\r\nconst PostList: React.FC<postListProps> = ({ posts, userId, loading }) => {\r\n  return (\r\n    <div className='resultsContainer'>\r\n      {loading ? (\r\n        <LoadingSpinner />\r\n      ) : posts.length === 0 ? (\r\n        <FallBackMessage />\r\n      ) : (\r\n        posts.map((post) => <Post key={post._id} post={post} userId={userId} />)\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\ninterface MetaProps {\r\n  title?: string;\r\n  description?: string;\r\n  keywords?: string;\r\n}\r\n\r\nconst Meta: React.FC<MetaProps> = ({ title, description, keywords }) => {\r\n  return (\r\n    <Helmet>\r\n      <title>{title}</title>\r\n      <meta name='description' content={description} />\r\n      <meta name='keyword' content={keywords} />\r\n    </Helmet>\r\n  );\r\n};\r\n\r\nMeta.defaultProps = {\r\n  title: 'Welcome To Tweet House',\r\n  description: 'Tweet House for developers',\r\n  keywords:\r\n    'Computer talks, Software development, Application, Software Engineer',\r\n};\r\n\r\nexport default Meta;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Cropper from 'cropperjs';\r\nimport 'cropperjs/src/css/cropper.scss';\r\nimport ModalLayout from './ModalLayout';\r\n\r\nimport * as uploadActions from '../../store/actions/upload/uploadActions';\r\n\r\nimport './modal.scss';\r\nimport 'react-image-crop/lib/ReactCrop.scss';\r\n\r\nlet cropper: Cropper;\r\n\r\ninterface ImageUploadProps {\r\n  showModal: boolean;\r\n  aspectRatio?: number;\r\n  dispatchAction?: (formData: FormData) => void;\r\n  formDataName?: string;\r\n  modalTitle?: string;\r\n  closeModal: () => void;\r\n}\r\n\r\nconst ImageUploadModal: React.FC<ImageUploadProps> = ({\r\n  showModal,\r\n  aspectRatio = 1 / 1,\r\n  dispatchAction = uploadActions.uploadProfilePic,\r\n  formDataName = 'profileImage',\r\n  modalTitle = 'Upload a new profile picture',\r\n  closeModal,\r\n}) => {\r\n  const [show, setShow] = useState(showModal || false);\r\n  const [imageUrl, setImageUrl] = useState<string | null>(null);\r\n\r\n  const imageElementRef = React.createRef<HTMLImageElement>();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (imageUrl) {\r\n      if (cropper !== undefined) {\r\n        cropper.destroy();\r\n      }\r\n\r\n      cropper = new Cropper(imageElementRef.current!, {\r\n        aspectRatio: aspectRatio,\r\n        background: false,\r\n      });\r\n    }\r\n  }, [imageUrl, imageElementRef, aspectRatio]);\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    closeModal();\r\n  };\r\n\r\n  const imageUploadHandler = () => {\r\n    const canvas = cropper.getCroppedCanvas();\r\n    if (!canvas) {\r\n      return alert('Could not upload image. Make suer it is an image file.');\r\n    }\r\n\r\n    canvas.toBlob((blob) => {\r\n      if (blob) {\r\n        const formData = new FormData();\r\n        formData.append(formDataName, blob, 'image.jpg');\r\n        dispatch(dispatchAction(formData));\r\n      } else {\r\n        alert('Could not Upload Image');\r\n      }\r\n    });\r\n\r\n    handleClose();\r\n  };\r\n\r\n  const fileChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      const file = e.target.files[0];\r\n      const url = URL.createObjectURL(file);\r\n      setImageUrl(url);\r\n    } else {\r\n      console.log('No file selected');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ModalLayout\r\n        show={show}\r\n        title={modalTitle}\r\n        actionBtnText='Save'\r\n        cancelBtnText='Cancel'\r\n        loadingSave={false}\r\n        submitHandler={imageUploadHandler}\r\n        handleClose={handleClose}\r\n      >\r\n        <input type='file' name='filePhoto' onChange={fileChangeHandler} />\r\n        {imageUrl && (\r\n          <div className='imagePreviewContainer'>\r\n            <img\r\n              src={imageUrl}\r\n              alt='Preview'\r\n              id='imagePreview'\r\n              ref={imageElementRef}\r\n            />\r\n          </div>\r\n        )}\r\n      </ModalLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ImageUploadModal;\r\n","import React, { useEffect, useMemo, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport LoadingSpinner from '../../components/loadingSpinner/LoadSpinner';\r\nimport Meta from '../../components/meta/Meta';\r\nimport PostList from '../../components/post/PostList';\r\nimport Tabs from '../../components/tabs/Tabs';\r\nimport UserList from '../../components/user/UserList';\r\n\r\nimport * as searchActions from '../../store/actions/search/searchActions';\r\nimport { SEARCH_RESET } from '../../store/actions/search/searchActionTypes';\r\nimport { RootStore } from '../../store/store';\r\n\r\nimport './search.scss';\r\n\r\ninterface RouteParams {\r\n  tabname: 'users' | 'posts';\r\n}\r\n\r\nlet timer: NodeJS.Timeout;\r\n\r\nconst SearchPage: React.FC<RouteComponentProps<RouteParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const [searchText, setSearchText] = useState('');\r\n  const [showSearchResults, setShowSearchResults] = useState(false);\r\n\r\n  const selectedTab = match.params.tabname;\r\n  const url = match.url;\r\n\r\n  const searchType =\r\n    selectedTab === 'posts'\r\n      ? 'posts'\r\n      : selectedTab === 'users'\r\n      ? 'users'\r\n      : null;\r\n\r\n  const TABS = useMemo(\r\n    () => [\r\n      {\r\n        id: 0,\r\n        name: 'Posts',\r\n        link: `/search/posts`,\r\n        active: selectedTab === 'posts',\r\n      },\r\n      {\r\n        id: 1,\r\n        name: 'Users',\r\n        link: `/search/users`,\r\n        active: selectedTab === 'users',\r\n      },\r\n    ],\r\n    [selectedTab]\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const state = useSelector((state: RootStore) => state);\r\n\r\n  const loggedInUserState = state.loggedInUserInfo;\r\n  const { user } = loggedInUserState;\r\n\r\n  const searchState = state.search;\r\n  const { posts, users, loading } = searchState;\r\n\r\n  useEffect(() => {\r\n    if (TABS.some((t) => t.link === url)) {\r\n      return;\r\n    }\r\n    history.push(TABS[0].link);\r\n  }, [TABS, selectedTab, history, url]);\r\n\r\n  useEffect(() => {\r\n    if (searchText.trim().length === 0) {\r\n      dispatch({ type: SEARCH_RESET });\r\n    }\r\n  }, [searchText, dispatch]);\r\n\r\n  const tabSelectHandler = (id: number) => {\r\n    history.push(TABS[id].link);\r\n  };\r\n\r\n  const searchHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setShowSearchResults(false);\r\n    clearTimeout(timer);\r\n    const text = e.target.value;\r\n    setSearchText(text);\r\n\r\n    timer = setTimeout(() => {\r\n      if (text.trim().length > 0) {\r\n        if (searchType) {\r\n          dispatch(\r\n            searchActions.search({ type: searchType, text: text.trim() })\r\n          );\r\n          setShowSearchResults(true);\r\n        }\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Meta title={`Posts/Users | Search`} />\r\n      <div className='searchBarContainer'>\r\n        <i className='fas fa-search'></i>\r\n        <input\r\n          type='text'\r\n          name='searchBox'\r\n          id='searchBox'\r\n          placeholder={`Search for ${selectedTab}`}\r\n          onChange={searchHandler}\r\n        />\r\n      </div>\r\n      <Tabs data={TABS} handleSelect={tabSelectHandler} />\r\n      {loading ? (\r\n        <LoadingSpinner />\r\n      ) : searchText.trim().length === 0 || !showSearchResults ? (\r\n        <></>\r\n      ) : (\r\n        <>\r\n          {selectedTab === 'posts' && (\r\n            <PostList posts={posts} userId={user!._id} />\r\n          )}\r\n          {selectedTab === 'users' && (\r\n            <UserList users={users} showBtns={true} />\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchPage;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport UserList from '../../../components/user/UserList';\r\n\r\nimport * as searchActions from '../../../store/actions/search/searchActions';\r\nimport * as chatActions from '../../../store/actions/chat/chatActions';\r\nimport { SEARCH_RESET } from '../../../store/actions/search/searchActionTypes';\r\nimport { UserType } from '../../../store/actions/user/userActionTypes';\r\nimport { RootStore } from '../../../store/store';\r\n\r\nimport './newMessage.scss';\r\nimport { RouteChildrenProps } from 'react-router';\r\nimport Meta from '../../../components/meta/Meta';\r\n\r\nlet timer: NodeJS.Timeout;\r\n\r\nconst NewMessagePage: React.FC<RouteChildrenProps> = ({ history }) => {\r\n  const [searchText, setSearchText] = useState('');\r\n  const [showSearchResults, setShowSearchResults] = useState(false);\r\n  const [selectedUsers, setSelectedUsers] = useState<UserType[]>([]);\r\n\r\n  const textInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const state = useSelector((state: RootStore) => state);\r\n\r\n  const loggedInUserState = state.loggedInUserInfo;\r\n  const { user } = loggedInUserState;\r\n\r\n  const searchState = state.search;\r\n  const { users, loading } = searchState;\r\n\r\n  const chatCreateState = state.chatCreate;\r\n  const { success, chat } = chatCreateState;\r\n\r\n  const selectableUsers = users.filter(\r\n    (u) =>\r\n      u._id !== user?._id && !selectedUsers.some((usr) => usr._id === u._id)\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (success && chat) {\r\n      return history.push(`/messages/${chat._id}`);\r\n    }\r\n\r\n    if (searchText.length === 0) {\r\n      dispatch({ type: SEARCH_RESET });\r\n    }\r\n  }, [searchText, dispatch, success, history, chat]);\r\n\r\n  const searchHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setShowSearchResults(false);\r\n    clearTimeout(timer);\r\n    const text = e.target.value.trim();\r\n    setSearchText(text);\r\n\r\n    timer = setTimeout(() => {\r\n      if (text.length > 0) {\r\n        dispatch(searchActions.search({ type: 'users', text: text }));\r\n        setShowSearchResults(true);\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  const keyDownHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    const inputIsEmpty = textInputRef.current!.value === '';\r\n    if (e.key === 'Backspace' && inputIsEmpty) {\r\n      let updatedSelctedUsers = [...selectedUsers];\r\n      updatedSelctedUsers.pop();\r\n      setSelectedUsers(updatedSelctedUsers);\r\n    }\r\n  };\r\n\r\n  const selectUserHandler = (user: UserType) => {\r\n    setSelectedUsers((prev) => [...prev, user]);\r\n    setSearchText('');\r\n\r\n    textInputRef.current!.value = '';\r\n    textInputRef.current!.focus();\r\n\r\n    dispatch({ type: SEARCH_RESET });\r\n  };\r\n\r\n  const createChatHandler = () => {\r\n    dispatch(chatActions.createChat(selectedUsers));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Meta title='New message | TweetHouse' />\r\n      <div className='chatPageContainer'>\r\n        <div className='chatTitleBar'>\r\n          <label htmlFor='userSearchTextbox'>To:</label>\r\n          <div id='selectedUsers'>\r\n            {selectedUsers.length > 0 &&\r\n              selectedUsers.map(({ _id, firstName, lastName }) => (\r\n                <span key={_id} className='selectedUser'>\r\n                  {firstName + ' ' + lastName}\r\n                </span>\r\n              ))}\r\n            <input\r\n              ref={textInputRef}\r\n              type='text'\r\n              id='userSearchTextbox'\r\n              placeholder='Type the name of the person'\r\n              onChange={searchHandler}\r\n              onKeyDown={keyDownHandler}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='resultsContainer'>\r\n          {!loading && searchText.length !== 0 && showSearchResults && (\r\n            <UserList\r\n              users={selectableUsers}\r\n              onSelectUser={selectUserHandler}\r\n            />\r\n          )}\r\n        </div>\r\n        <button\r\n          id='createChatButton'\r\n          disabled={selectedUsers.length === 0}\r\n          onClick={createChatHandler}\r\n        >\r\n          Create chat\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewMessagePage;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport PostForm from '../../components/postForm/PostForm';\r\nimport io from 'socket.io-client';\r\nimport { BASE_URL } from '../../api/index';\r\n\r\nimport { RootStore } from '../../store/store';\r\nimport * as postActions from '../../store/actions/post/postActions';\r\nimport PostList from '../../components/post/PostList';\r\nimport Meta from '../../components/meta/Meta';\r\n\r\nlet socket: SocketIOClient.Socket;\r\n\r\nconst HomePage: React.FC<RouteComponentProps> = ({\r\n  history,\r\n}: RouteComponentProps) => {\r\n  const state = useSelector((state: RootStore) => state);\r\n\r\n  const loggedInUserState = state.loggedInUserInfo;\r\n  const { user } = loggedInUserState;\r\n\r\n  const postListState = state.postList;\r\n  const { posts, loading, error } = postListState;\r\n\r\n  const postCreateState = state.postCreate;\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success,\r\n  } = postCreateState;\r\n\r\n  const postDeleteState = state.postDelete;\r\n  const { success: successDelete } = postDeleteState;\r\n\r\n  const postUpdateState = state.postUpdate;\r\n  const { success: successUpdate } = postUpdateState;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(postActions.listPosts());\r\n  }, [dispatch, successDelete, successUpdate]);\r\n\r\n  useEffect(() => {\r\n    socket = io(BASE_URL);\r\n    socket.emit('setup', user);\r\n  }, [user]);\r\n\r\n  if (!user) {\r\n    return <></>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Meta />\r\n      <PostForm\r\n        imageUrl={user.profilePic}\r\n        creating={loadingCreate}\r\n        error={errorCreate}\r\n        createSuccess={success}\r\n      />\r\n      {error ? (\r\n        <p>{error}</p>\r\n      ) : (\r\n        <PostList posts={posts} userId={user._id} loading={loading} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport * as userActions from '../../store/actions/user/userActions';\r\n\r\nimport './login.scss';\r\nimport { RootStore } from '../../store/store';\r\nimport Meta from '../../components/meta/Meta';\r\n\r\ntype OnChangeInputEventType = React.ChangeEvent<HTMLInputElement>;\r\n\r\nconst LoginPage: React.FC<RouteComponentProps> = ({\r\n  location,\r\n  history,\r\n}: RouteComponentProps) => {\r\n  const [logUserName, setLogUserName] = useState('');\r\n  const [logPassword, setLogPassword] = useState('');\r\n\r\n  const userAuthState = useSelector((state: RootStore) => state.userAuth);\r\n  const { error, user } = userAuthState;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/');\r\n    }\r\n  }, [dispatch, user, history]);\r\n\r\n  const loginHandler = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      userActions.authenticateUser(\r\n        { email: logUserName, password: logPassword },\r\n        'login'\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Meta title='Login | TweetHouse' />\r\n      <div className='loginPageLayout'>\r\n        <div className='loginContainer'>\r\n          <h1>Login</h1>\r\n          <form onSubmit={loginHandler}>\r\n            {error && <p>{error}</p>}\r\n            <input\r\n              type='text'\r\n              name='logUsername'\r\n              placeholder='Username or email'\r\n              required\r\n              onChange={(e: OnChangeInputEventType) =>\r\n                setLogUserName(e.target.value)\r\n              }\r\n            />\r\n            <input\r\n              type='password'\r\n              name='logPassword'\r\n              placeholder='Password'\r\n              required\r\n              onChange={(e: OnChangeInputEventType) =>\r\n                setLogPassword(e.target.value)\r\n              }\r\n            />\r\n            <input type='submit' value='Login' />\r\n          </form>\r\n          <p>\r\n            Need an account ? <Link to='/register'>Register here.</Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","// Libraries\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// Components & files\r\nimport * as userActions from '../../store/actions/user/userActions';\r\n// Types\r\nimport { RootStore } from '../../store/store';\r\n// Styles\r\nimport './login.scss';\r\nimport Meta from '../../components/meta/Meta';\r\n\r\ntype OnChangeInputEventType = React.ChangeEvent<HTMLInputElement>;\r\n\r\nconst RegisterPage = ({ history }: RouteComponentProps) => {\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [userName, setUserName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmedPassword, setConfirmedPassword] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const userAuthState = useSelector((state: RootStore) => state.userAuth);\r\n\r\n  const { error, user } = userAuthState;\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/');\r\n    }\r\n  }, [dispatch, user, history]);\r\n\r\n  const registerHandler = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (password === confirmedPassword) {\r\n      dispatch(\r\n        userActions.authenticateUser(\r\n          {\r\n            firstName,\r\n            lastName,\r\n            userName,\r\n            email,\r\n            password,\r\n          },\r\n          'register'\r\n        )\r\n      );\r\n    } else {\r\n      alert('Passwords do not match. Please try again!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Meta title='Register | TweetHouse' />\r\n      <div className='loginPageLayout'>\r\n        <div className='loginContainer'>\r\n          <h1>Register</h1>\r\n          <form onSubmit={registerHandler}>\r\n            {error && <p>{error}</p>}\r\n            <input\r\n              type='text'\r\n              name='firstName'\r\n              placeholder='First name'\r\n              value={firstName}\r\n              required\r\n              onChange={(e: OnChangeInputEventType) =>\r\n                setFirstName(e.target.value)\r\n              }\r\n            />\r\n            <input\r\n              type='text'\r\n              name='lastName'\r\n              placeholder='Last name'\r\n              value={lastName}\r\n              required\r\n              onChange={(e: OnChangeInputEventType) =>\r\n                setLastName(e.target.value)\r\n              }\r\n            />\r\n            <input\r\n              type='text'\r\n              name='userName'\r\n              placeholder='Username'\r\n              value={userName}\r\n              required\r\n              onChange={(e: OnChangeInputEventType) =>\r\n                setUserName(e.target.value)\r\n              }\r\n            />\r\n            <input\r\n              type='email'\r\n              name='email'\r\n              placeholder='Email'\r\n              value={email}\r\n              required\r\n              onChange={(e: OnChangeInputEventType) => setEmail(e.target.value)}\r\n            />\r\n            <input\r\n              type='password'\r\n              name='password'\r\n              placeholder='Password'\r\n              required\r\n              onChange={(e: OnChangeInputEventType) =>\r\n                setPassword(e.target.value)\r\n              }\r\n            />\r\n            <input\r\n              type='password'\r\n              name='passwordConf'\r\n              placeholder='Confirm password'\r\n              required\r\n              onChange={(e: OnChangeInputEventType) =>\r\n                setConfirmedPassword(e.target.value)\r\n              }\r\n            />\r\n\r\n            <input type='submit' value='Register' />\r\n          </form>\r\n          <p>\r\n            Alrady have an account ? <Link to='/login'>Login here.</Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { RootStore } from '../../store/store';\r\nimport * as postActions from '../../store/actions/post/postActions';\r\nimport Post from '../../components/post/Post';\r\nimport LoadingSpinner from '../../components/loadingSpinner/LoadSpinner';\r\nimport Meta from '../../components/meta/Meta';\r\n\r\ninterface RouteParams {\r\n  id: string;\r\n}\r\n\r\nconst ViewPostPage: React.FC<RouteComponentProps<RouteParams>> = ({\r\n  match,\r\n}) => {\r\n  const postId = match.params.id;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const userAuthState = useSelector((state: RootStore) => state.userAuth);\r\n  const { user } = userAuthState;\r\n\r\n  const postDetalsState = useSelector((state: RootStore) => state.postDetails);\r\n  const { loading, error, post } = postDetalsState;\r\n\r\n  useEffect(() => {\r\n    dispatch(postActions.getPostDetails(postId));\r\n  }, [dispatch, postId]);\r\n\r\n  if (loading) {\r\n    return <LoadingSpinner />;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>An Error Occured: ${error}</p>;\r\n  }\r\n\r\n  if (!post) {\r\n    return <p>No Post to Load</p>;\r\n  } else {\r\n    const clickedPost = post.postData;\r\n    const originalPost =\r\n      clickedPost.replyTo || clickedPost.retweetData || clickedPost;\r\n    const documentTitle =\r\n      originalPost.postedBy.firstName +\r\n      ' ' +\r\n      originalPost.postedBy.lastName +\r\n      ' on TweetHouse: ' +\r\n      originalPost.content;\r\n    return (\r\n      <div>\r\n        <Meta title={documentTitle} />\r\n        {post.replyTo &&\r\n          (post.replyTo._id ? (\r\n            // Replying To Post\r\n            <Post\r\n              key={post.replyTo._id}\r\n              post={post.replyTo}\r\n              userId={user!._id}\r\n            />\r\n          ) : (\r\n            <p>Original Post Not Found</p>\r\n          ))}\r\n        {/* User Clicked Post */}\r\n        <Post\r\n          key={post.postData._id}\r\n          post={post.postData}\r\n          userId={user!._id}\r\n          largeFont={true}\r\n        />\r\n        {/* Replies of User Clicked Post*/}\r\n        {post.replies.length > 0 &&\r\n          post.replies.map((post) => (\r\n            <Post key={post._id} post={post} userId={user!._id} />\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ViewPostPage;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './tabs.scss';\r\n\r\ninterface TabData {\r\n  id: number;\r\n  name: string;\r\n  link: string;\r\n  active: boolean;\r\n}\r\n\r\ninterface TabsProps {\r\n  data: TabData[];\r\n  handleSelect: (id: number) => void;\r\n}\r\n\r\nconst Tabs: React.FC<TabsProps> = ({ data, handleSelect }) => {\r\n  return (\r\n    <div className='tabsContainer'>\r\n      {data.map((tab, index) => (\r\n        <Link\r\n          key={index}\r\n          to={'#'}\r\n          onClick={() => handleSelect(tab.id)}\r\n          className={`tab ${tab.active && 'active'}`}\r\n        >\r\n          <span>{tab.name}</span>\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tabs;\r\n","import { Dispatch } from 'react';\r\nimport * as api from '../../../api/index';\r\nimport { getApiErrorMessage } from '../../../utils/errorMessage';\r\nimport {\r\n  ProfilePicUploadDispatchTypes,\r\n  PROFILE_PIC_UPLOAD_FAIL,\r\n  PROFILE_PIC_UPLOAD_LOADING,\r\n  PROFILE_PIC_UPLOAD_SUCCESS,\r\n} from './uploadActionTypes';\r\n\r\nexport const uploadProfilePic = (formData: FormData) => {\r\n  return async (dispatch: Dispatch<ProfilePicUploadDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: PROFILE_PIC_UPLOAD_LOADING });\r\n\r\n      await api.uploadProfilePicture(formData);\r\n\r\n      dispatch({ type: PROFILE_PIC_UPLOAD_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: PROFILE_PIC_UPLOAD_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const uploadCoverPhoto = (formData: FormData) => {\r\n  return async (dispatch: Dispatch<ProfilePicUploadDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: PROFILE_PIC_UPLOAD_LOADING });\r\n\r\n      await api.uploadCoverPhoto(formData);\r\n\r\n      dispatch({ type: PROFILE_PIC_UPLOAD_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: PROFILE_PIC_UPLOAD_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { UserType } from '../../store/actions/user/userActionTypes';\r\nimport { RootStore } from '../../store/store';\r\nimport ImageUploadModal from '../modals/ImageUploadModal';\r\n\r\nimport './profileImage.scss';\r\n\r\ntype ProfileImageProps = { uri: string; profileUser: UserType };\r\n\r\nconst ProfilePageProfile: React.FC<ProfileImageProps> = ({\r\n  uri,\r\n  profileUser,\r\n}) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const loggedInUserState = useSelector(\r\n    (state: RootStore) => state.loggedInUserInfo\r\n  );\r\n  const { user } = loggedInUserState;\r\n\r\n  const handleShowModal = () => {\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  return (\r\n    <div className='userImageContainer'>\r\n      <img src={`${uri}`} alt='Profile Pic' />\r\n      {profileUser._id === user?._id && (\r\n        <>\r\n          <button className='profilePictureButton' onClick={handleShowModal}>\r\n            <i className='fas fa-camera'></i>\r\n          </button>\r\n          {showModal && (\r\n            <ImageUploadModal\r\n              showModal={showModal}\r\n              closeModal={handleCloseModal}\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePageProfile;\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { UserType } from '../../store/actions/user/userActionTypes';\r\nimport { RootStore } from '../../store/store';\r\nimport ImageUploadModal from '../modals/ImageUploadModal';\r\n\r\nimport * as uploadActions from '../../store/actions/upload/uploadActions';\r\n\r\nimport './profileImage.scss';\r\n\r\ntype CoverPhotoProps = { uri: string; profileUser: UserType };\r\n\r\nconst CoverPhoto: React.FC<CoverPhotoProps> = ({ uri, profileUser }) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const loggedInUserState = useSelector(\r\n    (state: RootStore) => state.loggedInUserInfo\r\n  );\r\n  const { user } = loggedInUserState;\r\n\r\n  const handleShowModal = () => {\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  return (\r\n    <div className='coverPhotoContainer'>\r\n      {profileUser.coverPhoto && (\r\n        <img src={profileUser.coverPhoto} alt=\"User's CoverPhoto\" />\r\n      )}\r\n      {profileUser._id === user?._id && (\r\n        <>\r\n          <button className='coverPhotoButton' onClick={handleShowModal}>\r\n            <i className='fas fa-camera'></i>\r\n          </button>\r\n          {showModal && (\r\n            <ImageUploadModal\r\n              showModal={showModal}\r\n              aspectRatio={16 / 9}\r\n              dispatchAction={uploadActions.uploadCoverPhoto}\r\n              formDataName='coverPhoto'\r\n              modalTitle='Upload a new cover photo'\r\n              closeModal={handleCloseModal}\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoverPhoto;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport TitleBar from '../../components/titleBar/TitleBar';\r\nimport { UserType } from '../../store/actions/user/userActionTypes';\r\nimport { RootStore } from '../../store/store';\r\n\r\nimport Tabs from '../../components/tabs/Tabs';\r\nimport Post from '../../components/post/Post';\r\nimport * as postActions from '../../store/actions/post/postActions';\r\nimport * as userActions from '../../store/actions/user/userActions';\r\nimport ProfilePageProfile from '../../components/image/ProfilePageProfile';\r\nimport CoverPhoto from '../../components/image/CoverPhoto';\r\nimport LoadingSpinner from '../../components/loadingSpinner/LoadSpinner';\r\nimport FallBackMessage from '../../components/fallbackMessage/FallbackMessage';\r\nimport Meta from '../../components/meta/Meta';\r\n\r\ninterface ProfileProps {\r\n  userInfo: UserType;\r\n}\r\n\r\nconst ProfilePage: React.FC<ProfileProps> = ({ userInfo }) => {\r\n  const [activeTabId, setActiveTabId] = useState(0);\r\n\r\n  const {\r\n    _id,\r\n    firstName,\r\n    lastName,\r\n    userName,\r\n    profilePic,\r\n    followers,\r\n    following,\r\n  } = userInfo;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const state = useSelector((state: RootStore) => state);\r\n\r\n  const loggedInUserState = state.loggedInUserInfo;\r\n  const { user: loggedInUser } = loggedInUserState;\r\n\r\n  const postListState = state.postList;\r\n  const { posts, loading, error } = postListState;\r\n\r\n  const postUpdateState = state.postUpdate;\r\n  const { success } = postUpdateState;\r\n\r\n  const pinnedPost = posts.find((p) => p.pinned === true);\r\n\r\n  const isFollowing =\r\n    loggedInUser?.following && loggedInUser.following.includes(_id);\r\n  const followBtnText = isFollowing ? 'Following' : 'Follow';\r\n  const followBtnClass = isFollowing\r\n    ? 'followButton following'\r\n    : 'followButton';\r\n  const followingCount = following.length || 0;\r\n  const followersCount = followers.length || 0;\r\n\r\n  useEffect(() => {\r\n    if (activeTabId === 0) {\r\n      dispatch(postActions.listPosts(_id));\r\n    } else if (activeTabId === 1) {\r\n      dispatch(postActions.listPosts(_id, true));\r\n    }\r\n  }, [dispatch, _id, activeTabId, success]);\r\n\r\n  const TABS = [\r\n    {\r\n      id: 0,\r\n      name: 'Posts',\r\n      link: `/profile/${userName}`,\r\n      active: activeTabId === 0,\r\n    },\r\n    {\r\n      id: 1,\r\n      name: 'Replies',\r\n      link: `/profile/${userName}/replies`,\r\n      active: activeTabId === 1,\r\n    },\r\n  ];\r\n\r\n  const followUserHandler = () => {\r\n    dispatch(userActions.followUser(_id, true));\r\n  };\r\n\r\n  const tabSelectHandler = (id: number) => {\r\n    setActiveTabId(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Meta title={`${firstName} ${lastName} @(${userName})`} />\r\n      <TitleBar title={firstName + ' ' + lastName} />\r\n      <div className='profileHeaderContainer'>\r\n        <div className='coverPhotoSection'>\r\n          <CoverPhoto uri={''} profileUser={userInfo} />\r\n          <ProfilePageProfile uri={profilePic} profileUser={userInfo} />\r\n        </div>\r\n        <div className='profileButtonsContainer'>\r\n          {loggedInUser?._id !== _id && (\r\n            <>\r\n              <Link to={`/message/${_id}`} className='profileButton'>\r\n                <i className='fas fa-envelope'></i>\r\n              </Link>\r\n              <button onClick={followUserHandler} className={followBtnClass}>\r\n                {followBtnText}\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className='userDetailsContainer'>\r\n          <span className='displayName'>{firstName + ' ' + lastName}</span>\r\n          <span className='username'>@{userName}</span>\r\n          <span className='description'></span>\r\n          <div className='followersContainer'>\r\n            <Link to={`/profile/${_id}/following`}>\r\n              <span className='value'>{followingCount}</span>\r\n              <span>Following</span>\r\n            </Link>\r\n            <Link to={`/profile/${_id}/followers`}>\r\n              <span className='value'>{followersCount}</span>\r\n              <span>Followers</span>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Tabs data={TABS} handleSelect={tabSelectHandler} />\r\n      {loading ? (\r\n        <LoadingSpinner />\r\n      ) : error ? (\r\n        <p>{error}</p>\r\n      ) : posts.length === 0 ? (\r\n        <FallBackMessage />\r\n      ) : (\r\n        <>\r\n          {activeTabId === 0 && pinnedPost && (\r\n            <div className='pinnedPostContainer'>\r\n              <Post post={pinnedPost} userId={loggedInUser!._id} />\r\n            </div>\r\n          )}\r\n          {posts.map((post) => (\r\n            <Post key={post._id} post={post} userId={loggedInUser!._id} />\r\n          ))}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { RootStore } from '../../store/store';\r\n\r\nimport ProfilePage from './ProfilePage';\r\nimport * as userActions from '../../store/actions/user/userActions';\r\n\r\nimport './profile.scss';\r\n\r\nconst MyProfilePage: React.FC<RouteComponentProps> = ({\r\n  history,\r\n}: RouteComponentProps) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const state = useSelector((state: RootStore) => state);\r\n\r\n  const loggedInUserInfoState = state.loggedInUserInfo;\r\n  const { loading, error, user } = loggedInUserInfoState;\r\n\r\n  const profilePicUploadState = state.profilePicUpload;\r\n  const { success } = profilePicUploadState;\r\n\r\n  useEffect(() => {\r\n    dispatch(userActions.getLoggedInUserInfo());\r\n  }, [dispatch, success]);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  } else if (error) {\r\n    return <p>{error}</p>;\r\n  } else if (user) {\r\n    return <ProfilePage userInfo={user} />;\r\n  } else {\r\n    return <h1>No User found</h1>;\r\n  }\r\n};\r\n\r\nexport default MyProfilePage;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootStore } from '../../store/store';\r\n\r\nimport ProfilePage from './ProfilePage';\r\nimport * as userActions from '../../store/actions/user/userActions';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport TitleBar from '../../components/titleBar/TitleBar';\r\n\r\nimport './profile.scss';\r\n\r\ninterface RouteParams {\r\n  id: string;\r\n}\r\n\r\nconst OthersProfilePage: React.FC<RouteComponentProps<RouteParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const profileId = match.params.id;\r\n  const dispatch = useDispatch();\r\n\r\n  const loggedInUserState = useSelector(\r\n    (state: RootStore) => state.loggedInUserInfo\r\n  );\r\n  const { user: loggedInUser } = loggedInUserState;\r\n\r\n  const userInfoState = useSelector((state: RootStore) => state.userInfo);\r\n  const { user, loading, error } = userInfoState;\r\n\r\n  const loggedInUserId = loggedInUser?._id;\r\n  const loggedInUserName = loggedInUser?.userName;\r\n\r\n  useEffect(() => {\r\n    if (profileId === loggedInUserId || profileId === loggedInUserName) {\r\n      return history.push('/profile');\r\n    } else {\r\n      dispatch(userActions.getUserInfoById(profileId));\r\n    }\r\n  }, [dispatch, profileId, history, loggedInUserId, loggedInUserName]);\r\n\r\n  if (loading) {\r\n    return <p>Loading Profile...</p>;\r\n  }\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <TitleBar title={error} />\r\n        <span className='errorMessage'>\r\n          Check the url you are trying to access\r\n        </span>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (user) {\r\n    return <ProfilePage userInfo={user} />;\r\n  } else {\r\n    return <h1>User Not Found</h1>;\r\n  }\r\n};\r\n\r\nexport default OthersProfilePage;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserType } from '../../store/actions/user/userActionTypes';\r\nimport { RootStore } from '../../store/store';\r\n\r\nimport * as userActions from '../../store/actions/user/userActions';\r\n\r\ninterface UserProps {\r\n  user: UserType;\r\n  showFollowBtn?: boolean;\r\n  onSelectUser?: (user: UserType) => void;\r\n}\r\nconst User: React.FC<UserProps> = ({ user, showFollowBtn, onSelectUser }) => {\r\n  const dispatch = useDispatch();\r\n  const fullName = user.firstName + ' ' + user.lastName;\r\n  const loggedInUserState = useSelector(\r\n    (state: RootStore) => state.loggedInUserInfo\r\n  );\r\n  const { user: loggedInUser } = loggedInUserState;\r\n\r\n  // Conditional Follow/Following Button\r\n  const showBtn = showFollowBtn && loggedInUser?._id !== user._id;\r\n  const isFollowing =\r\n    loggedInUser?.following && loggedInUser.following.includes(user._id);\r\n  const followBtnText = isFollowing ? 'Following' : 'Follow';\r\n  const followBtnClass = isFollowing\r\n    ? 'followButton following'\r\n    : 'followButton';\r\n\r\n  const followUserHandler = () => {\r\n    dispatch(userActions.followUser(user._id));\r\n  };\r\n\r\n  const userSelectHandler = () => {\r\n    if (onSelectUser) onSelectUser(user);\r\n    else return;\r\n  };\r\n\r\n  return (\r\n    <div className='user' onClick={userSelectHandler}>\r\n      <div className='userImageContainer'>\r\n        <img src={user.profilePic} alt='Profile Pic' />\r\n      </div>\r\n      <div className='userDetailsContainer'>\r\n        <div className='header'>\r\n          <Link to={`/profile/${user.userName}`} className='displayName'>\r\n            {fullName}\r\n          </Link>\r\n          <span className='username'> @{user.userName}</span>\r\n        </div>\r\n      </div>\r\n      {showBtn && (\r\n        <div className='followButtonContainer'>\r\n          <button onClick={followUserHandler} className={followBtnClass}>\r\n            {followBtnText}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import React from 'react';\r\n\r\nimport User from './User';\r\nimport { UserType } from '../../store/actions/user/userActionTypes';\r\n\r\nimport './userList.scss';\r\nimport FallBackMessage from '../fallbackMessage/FallbackMessage';\r\n\r\ninterface userListProps {\r\n  users: UserType[];\r\n  showBtns?: boolean;\r\n  onSelectUser?: (user: UserType) => void;\r\n}\r\nconst UserList: React.FC<userListProps> = ({\r\n  users,\r\n  showBtns,\r\n  onSelectUser,\r\n}) => {\r\n  const selectUserHandler = (user: UserType) => {\r\n    if (onSelectUser) onSelectUser(user);\r\n    else return;\r\n  };\r\n  return (\r\n    <div className='resultsContainer'>\r\n      {users.length === 0 ? (\r\n        <FallBackMessage message='No user to show' />\r\n      ) : (\r\n        users.map((user) => (\r\n          <User\r\n            key={user._id}\r\n            user={user}\r\n            showFollowBtn={showBtns}\r\n            onSelectUser={selectUserHandler}\r\n          />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootStore } from '../../../store/store';\r\n\r\nimport * as userActions from '../../../store/actions/user/userActions';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport TitleBar from '../../../components/titleBar/TitleBar';\r\nimport Tabs from '../../../components/tabs/Tabs';\r\nimport UserList from '../../../components/user/UserList';\r\nimport FallBackMessage from '../../../components/fallbackMessage/FallbackMessage';\r\nimport Meta from '../../../components/meta/Meta';\r\n\r\ninterface RouteParams {\r\n  id: string;\r\n  tabname: 'followers' | 'following';\r\n}\r\n\r\nconst FollowersFollowingPage: React.FC<RouteComponentProps<RouteParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const profileId = match.params.id;\r\n  const selectedTab = match.params.tabname;\r\n  const dispatch = useDispatch();\r\n\r\n  const userInfoState = useSelector((state: RootStore) => state.userInfo);\r\n  const { user, loading, error } = userInfoState;\r\n\r\n  const userFollowersState = useSelector(\r\n    (state: RootStore) => state.userFollowers\r\n  );\r\n  const {\r\n    users: followers,\r\n    loading: loadingFollowers,\r\n    error: errorFollowers,\r\n  } = userFollowersState;\r\n\r\n  const userFollowingState = useSelector(\r\n    (state: RootStore) => state.userFollowingList\r\n  );\r\n  const {\r\n    users: following,\r\n    loading: loadingFollowing,\r\n    error: errorFollowing,\r\n  } = userFollowingState;\r\n\r\n  const displayedUsers = selectedTab === 'followers' ? followers : following;\r\n  const displayedLoading =\r\n    selectedTab === 'followers' ? loadingFollowers : loadingFollowing;\r\n  const displayedError =\r\n    selectedTab === 'followers' ? errorFollowers : errorFollowing;\r\n\r\n  useEffect(() => {\r\n    if (selectedTab === 'followers') {\r\n      dispatch(userActions.getUserFollowers(profileId));\r\n    } else if (selectedTab === 'following') {\r\n      dispatch(userActions.getUserFollowing(profileId));\r\n    }\r\n  }, [dispatch, profileId, selectedTab]);\r\n\r\n  useEffect(() => {\r\n    dispatch(userActions.getUserInfoById(profileId));\r\n  }, [dispatch, profileId]);\r\n\r\n  const TABS = [\r\n    {\r\n      id: 0,\r\n      name: 'Followers',\r\n      link: `/profile/${profileId}/followers`,\r\n      active: selectedTab === 'followers',\r\n    },\r\n    {\r\n      id: 1,\r\n      name: 'Following',\r\n      link: `/profile/${profileId}/following`,\r\n      active: selectedTab === 'following',\r\n    },\r\n  ];\r\n\r\n  const tabSelectHandler = (id: number) => {\r\n    history.push(TABS[id].link);\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading ...</p>;\r\n  }\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <TitleBar title={error || 'Something Went Wrong'} />\r\n        <span className='errorMessage'>\r\n          Check the url you are trying to access\r\n        </span>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (!user) {\r\n    return <h1>User Not Found</h1>;\r\n  } else {\r\n    return (\r\n      <>\r\n        <Meta\r\n          title={`Followers/Following | ${user.firstName} ${user.lastName}`}\r\n        />\r\n        <TitleBar title={user.firstName + ' ' + user.lastName} />\r\n        <Tabs data={TABS} handleSelect={tabSelectHandler} />\r\n        {displayedLoading ? (\r\n          <p>Loading Users...</p>\r\n        ) : displayedError ? (\r\n          <p>{displayedError}</p>\r\n        ) : displayedUsers.length === 0 ? (\r\n          <FallBackMessage message='No user to show' />\r\n        ) : (\r\n          <UserList users={displayedUsers} showBtns={true} />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default FollowersFollowingPage;\r\n","import { Dispatch } from 'react';\r\nimport {\r\n  SearchDispatchTypes,\r\n  SearchObjectI,\r\n  SEARCH_FAIL,\r\n  SEARCH_LOADING,\r\n  SEARCH_POSTS_SUCCESS,\r\n  SEARCH_USERS_SUCCESS,\r\n} from './searchActionTypes';\r\n\r\nimport * as api from '../../../api/index';\r\nimport { getApiErrorMessage } from '../../../utils/errorMessage';\r\n\r\nexport const search = (searchObj: SearchObjectI) => {\r\n  return async (dispatch: Dispatch<SearchDispatchTypes>) => {\r\n    try {\r\n      dispatch({ type: SEARCH_LOADING });\r\n\r\n      const searchingFor = searchObj.type;\r\n      const keyword = searchObj.text;\r\n\r\n      if (searchingFor === 'posts') {\r\n        const { data } = await api.searchPosts(keyword);\r\n\r\n        dispatch({ type: SEARCH_POSTS_SUCCESS, payload: data });\r\n      } else if (searchingFor === 'users') {\r\n        const { data } = await api.searchUsers(keyword);\r\n\r\n        dispatch({ type: SEARCH_USERS_SUCCESS, payload: data });\r\n      }\r\n    } catch (err) {\r\n      dispatch({\r\n        type: SEARCH_FAIL,\r\n        payload: getApiErrorMessage(err),\r\n      });\r\n    }\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { ChatInterface } from '../../store/actions/chat/chatActionTypes';\r\nimport FallBackMessage from '../fallbackMessage/FallbackMessage';\r\nimport Chat from './Chat';\r\n\r\ninterface ChatListProps {\r\n  chats: ChatInterface[];\r\n}\r\n\r\nconst ChatList: React.FC<ChatListProps> = ({ chats }) => {\r\n  return (\r\n    <>\r\n      {chats.length === 0 ? (\r\n        <FallBackMessage message='Nothing to show' />\r\n      ) : (\r\n        chats.map((chat) => <Chat key={chat._id} chat={chat} />)\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatList;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ChatList from '../../../components/chat/ChatList';\r\nimport TitleBar from '../../../components/titleBar/TitleBar';\r\nimport { RootStore } from '../../../store/store';\r\n\r\nimport * as chatActions from '../../../store/actions/chat/chatActions';\r\nimport LoadingSpinner from '../../../components/loadingSpinner/LoadSpinner';\r\nimport Meta from '../../../components/meta/Meta';\r\n\r\nconst InboxPage: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const state = useSelector((state: RootStore) => state);\r\n\r\n  const chatListState = state.chatList;\r\n  const { loading, error, chats } = chatListState;\r\n\r\n  useEffect(() => {\r\n    dispatch(chatActions.listChats());\r\n  }, [dispatch]);\r\n  return (\r\n    <>\r\n      <Meta title='Messages | TweetHouse' />\r\n      <TitleBar\r\n        title='Inbox'\r\n        headerBtnIcon='far fa-plus-square'\r\n        link='/messages/new'\r\n      />\r\n      {loading ? (\r\n        <LoadingSpinner />\r\n      ) : error ? (\r\n        <p>{error}</p>\r\n      ) : (\r\n        <ChatList chats={chats} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InboxPage;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { MessageInterface } from '../../store/actions/message/messageActionTypes';\r\nimport { RootStore } from '../../store/store';\r\nimport LoadingSpinner from '../loadingSpinner/LoadSpinner';\r\nimport { isFirstInMsgChain, isLastInMsgChain } from './helpers';\r\n\r\ninterface ChatMessageProps {\r\n  lastMessage: MessageInterface;\r\n  message: MessageInterface;\r\n  nextMessage: MessageInterface;\r\n}\r\n\r\nconst ChatMessage: React.FC<ChatMessageProps> = ({\r\n  lastMessage,\r\n  message,\r\n  nextMessage,\r\n}) => {\r\n  const loggedInUser = useSelector(\r\n    (state: RootStore) => state.loggedInUserInfo.user\r\n  );\r\n\r\n  const {\r\n    content,\r\n    sender: { _id: senderId, firstName, lastName, profilePic },\r\n    loading,\r\n    error,\r\n  } = message;\r\n\r\n  const isMsgMine = senderId === loggedInUser?._id;\r\n\r\n  const isMsgFirstInchain = isFirstInMsgChain(lastMessage, senderId);\r\n  const isMsgLastInChain = isLastInMsgChain(message.sender._id, nextMessage);\r\n\r\n  const mineOrTheirMsgClassName = isMsgMine ? 'mine' : 'theirs';\r\n  const firstMsgClassName = isMsgFirstInchain ? 'first' : '';\r\n  const lastMsgClassName = isMsgLastInChain ? 'last' : '';\r\n\r\n  const liClassName =\r\n    'message ' +\r\n    mineOrTheirMsgClassName +\r\n    ' ' +\r\n    firstMsgClassName +\r\n    ' ' +\r\n    lastMsgClassName;\r\n\r\n  return (\r\n    <li className={liClassName}>\r\n      {!isMsgMine && (\r\n        <div className='imageContainer'>\r\n          {isMsgLastInChain && <img src={profilePic} alt={firstName} />}\r\n        </div>\r\n      )}\r\n      <div className='messageContainer'>\r\n        {!isMsgMine && isMsgFirstInchain && (\r\n          <span className='senderName'>{firstName + ' ' + lastName}</span>\r\n        )}\r\n        <span className='messageBody'>{content}</span>\r\n        {isMsgMine && loading && <LoadingSpinner />}\r\n        {isMsgMine && error && <span className='errorText'>{error}</span>}\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ChatMessage;\r\n","import { MessageInterface } from '../../store/actions/message/messageActionTypes';\r\n\r\nexport const isFirstInMsgChain = (\r\n  lastMessage: MessageInterface,\r\n  currentSenderId: string\r\n) => {\r\n  if (!lastMessage) {\r\n    return true;\r\n  }\r\n\r\n  const lastSenderId = lastMessage.sender._id;\r\n\r\n  if (lastSenderId !== currentSenderId) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const isLastInMsgChain = (\r\n  currentSenderId: string,\r\n  nextMessage: MessageInterface\r\n) => {\r\n  if (!nextMessage) {\r\n    return true;\r\n  }\r\n\r\n  const nextSenderId = nextMessage.sender._id;\r\n\r\n  if (nextSenderId !== currentSenderId) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n","import React, { useEffect, useRef } from 'react';\r\nimport ChatMessage from './ChatMessage';\r\n\r\nimport './chatBox.scss';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootStore } from '../../store/store';\r\n\r\nimport * as messageActions from '../../store/actions/message/messageActions';\r\nimport LoadingSpinner from '../loadingSpinner/LoadSpinner';\r\nimport FallBackMessage from '../fallbackMessage/FallbackMessage';\r\n\r\ninterface ChatBoxMessagesProps {\r\n  chatId: string;\r\n}\r\n\r\nconst ChatBoxMessages: React.FC<ChatBoxMessagesProps> = ({ chatId }) => {\r\n  const lastMessageRef = useRef<HTMLDivElement>(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const state = useSelector((state: RootStore) => state);\r\n\r\n  const messageListState = state.messageList;\r\n  const { loading, error, messages } = messageListState;\r\n\r\n  const messageSendState = state.messageSend;\r\n  const { success } = messageSendState;\r\n\r\n  useEffect(() => {\r\n    dispatch(messageActions.listMessages(chatId));\r\n  }, [dispatch, chatId]);\r\n\r\n  useEffect(() => {\r\n    lastMessageRef.current?.scrollIntoView({\r\n      behavior: success ? 'smooth' : 'auto',\r\n    });\r\n  }, [messages, success]);\r\n\r\n  return (\r\n    <ul className='chatMessages'>\r\n      {loading ? (\r\n        <LoadingSpinner />\r\n      ) : error ? (\r\n        <p>{error}</p>\r\n      ) : messages.length === 0 ? (\r\n        <FallBackMessage message='Conversation have not started yet' />\r\n      ) : (\r\n        messages.map((message, index) => (\r\n          <ChatMessage\r\n            key={message._id}\r\n            message={message}\r\n            lastMessage={messages[index - 1]}\r\n            nextMessage={messages[index + 1]}\r\n          />\r\n        ))\r\n      )}\r\n      <div style={{ height: 0 }} ref={lastMessageRef}></div>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ChatBoxMessages;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport './modal.scss';\r\nimport ModalLayout from './ModalLayout';\r\nimport { ChatInterface } from '../../store/actions/chat/chatActionTypes';\r\n\r\nimport * as chatActions from '../../store/actions/chat/chatActions';\r\nimport { RootStore } from '../../store/store';\r\nimport { getChatName } from '../../components/chat/helpers';\r\n\r\ninterface chatNameModalProps {\r\n  chat: ChatInterface;\r\n}\r\n\r\nconst ChatNameModal: React.FC<chatNameModalProps> = ({ chat }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [chatName, setChatName] = useState(chat.chatName || '');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const loggedInUserState = useSelector(\r\n    (state: RootStore) => state.loggedInUserInfo\r\n  );\r\n  const { user } = loggedInUserState;\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const openModalHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.stopPropagation();\r\n    handleShow();\r\n  };\r\n\r\n  const chatNameSaveHandler = () => {\r\n    dispatch(chatActions.updateChat(chat._id, chatName));\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className='ellipsis'>\r\n        <span id='chatName ellipsis' onClick={openModalHandler}>\r\n          {getChatName(chat, user!._id)}\r\n        </span>\r\n      </div>\r\n\r\n      <ModalLayout\r\n        show={show}\r\n        title='Change the chat name'\r\n        actionBtnText='Save'\r\n        cancelBtnText='Cancel'\r\n        submitHandler={chatNameSaveHandler}\r\n        handleClose={handleClose}\r\n      >\r\n        <input\r\n          id='chatNameTextbox'\r\n          type='text'\r\n          value={chatName}\r\n          placeholder='Enter the name for this chat'\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            setChatName(e.target.value)\r\n          }\r\n        />\r\n      </ModalLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatNameModal;\r\n","import React from 'react';\r\nimport { NotificationInterface } from '../../store/actions/notification/notificationActionTypes';\r\nimport FallBackMessage from '../fallbackMessage/FallbackMessage';\r\nimport LoadingSpinner from '../loadingSpinner/LoadSpinner';\r\nimport Notification from './Notification';\r\n\r\ninterface NotificationsProps {\r\n  notifications: NotificationInterface[];\r\n  loading?: boolean;\r\n  error?: string;\r\n}\r\n\r\nconst NotificationList: React.FC<NotificationsProps> = ({\r\n  notifications,\r\n  loading,\r\n  error,\r\n}) => {\r\n  if (loading) {\r\n    return <LoadingSpinner />;\r\n  } else if (error) {\r\n    return <p>{error}</p>;\r\n  } else if (notifications.length === 0) {\r\n    return <FallBackMessage />;\r\n  } else {\r\n    return (\r\n      <>\r\n        {notifications.map((notification) => (\r\n          <Notification key={notification._id} notification={notification} />\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default NotificationList;\r\n","import React from 'react';\r\nimport MainLayout from '../layout/MainLayout';\r\nimport HomePage from '../pages/home/HomePage';\r\nimport LoginPage from '../pages/login/LoginPage';\r\nimport RegisterPage from '../pages/login/RegisterPage';\r\nimport PostPage from '../pages/post/PostPage';\r\nimport MyProfilePage from '../pages/profile/MyProfilePage';\r\nimport OthersProfilePage from '../pages/profile/OthersProfilePage';\r\nimport FollowersFollowingPage from '../pages/profile/followers-following/FollowersFollowingPage';\r\nimport SearchPage from '../pages/search/SearchPage';\r\nimport InboxPage from '../pages/messages/inbox/InboxPage';\r\nimport NewMessagePage from '../pages/messages/newMessage/NewMessagePage';\r\nimport ChatPage from '../pages/messages/chat/ChatPage';\r\nimport NotificationPage from '../pages/notification/NotificationPage';\r\n\r\ninterface PagesInterface {\r\n  exact: boolean;\r\n  path: string;\r\n  component: React.FC<any>;\r\n  layout?: React.FC<any>;\r\n  protect: boolean;\r\n  pageTitle?: string;\r\n}\r\n\r\nconst pages: PagesInterface[] = [\r\n  {\r\n    exact: true,\r\n    path: '/',\r\n    component: HomePage,\r\n    layout: MainLayout,\r\n    protect: true,\r\n    pageTitle: 'Home',\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/post/:id',\r\n    component: PostPage,\r\n    layout: MainLayout,\r\n    protect: true,\r\n    pageTitle: 'View Post',\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/profile',\r\n    component: MyProfilePage,\r\n    layout: MainLayout,\r\n    protect: true,\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/profile/:id',\r\n    component: OthersProfilePage,\r\n    layout: MainLayout,\r\n    protect: true,\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/profile/:id/:tabname',\r\n    component: FollowersFollowingPage,\r\n    layout: MainLayout,\r\n    protect: true,\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/search/:tabname',\r\n    component: SearchPage,\r\n    layout: MainLayout,\r\n    protect: true,\r\n    pageTitle: 'Search',\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/messages',\r\n    component: InboxPage,\r\n    layout: MainLayout,\r\n    protect: true,\r\n    // pageTitle: 'Inbox',\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/messages/new',\r\n    component: NewMessagePage,\r\n    layout: MainLayout,\r\n    protect: true,\r\n    pageTitle: 'New message',\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/message/:id',\r\n    component: ChatPage,\r\n    layout: MainLayout,\r\n    protect: true,\r\n    pageTitle: 'Chat',\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/notifications',\r\n    component: NotificationPage,\r\n    layout: MainLayout,\r\n    protect: true,\r\n    // pageTitle: 'Notifications',\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/register',\r\n    component: RegisterPage,\r\n    protect: false,\r\n    pageTitle: 'Register',\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/login',\r\n    component: LoginPage,\r\n    protect: false,\r\n    pageTitle: 'Login',\r\n  },\r\n];\r\n\r\nexport default pages;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { getChatName } from '../../../components/chat/helpers';\r\nimport ChatBoxMessages from '../../../components/chatBox/ChatBoxMessages';\r\nimport Meta from '../../../components/meta/Meta';\r\nimport ChatNameModal from '../../../components/modals/ChatNameModal';\r\n\r\nimport * as chatActions from '../../../store/actions/chat/chatActions';\r\nimport * as messageActions from '../../../store/actions/message/messageActions';\r\nimport {\r\n  emitStopTypingSocket,\r\n  joinChatRoomSocket,\r\n  updateTypingSocket,\r\n} from '../../../store/actions/socket/socketActions';\r\nimport { SOCKET_CHAT_ROOM_TYPING_RESET } from '../../../store/actions/socket/socketsActionsTypes';\r\nimport { UserType } from '../../../store/actions/user/userActionTypes';\r\nimport { RootStore } from '../../../store/store';\r\n\r\nimport './chat.scss';\r\n\r\ninterface RouteParams {\r\n  id: string;\r\n}\r\n\r\nconst maxImagesToShow = 3;\r\n\r\nconst getTitleBarImages = (users: UserType[], loggedInUser: UserType) => {\r\n  let images: string[] = [];\r\n\r\n  if (users.length === 1) {\r\n    images.push(users[0].profilePic);\r\n    return images;\r\n  }\r\n  const otherUsers = users.filter((u) => u._id !== loggedInUser._id);\r\n  return otherUsers.slice(0, maxImagesToShow).map((u) => u.profilePic);\r\n};\r\n\r\nconst getRemainingImagesCount = (totalCount: number) => {\r\n  return totalCount - maxImagesToShow - 1; // Remove 1 since we won't show our own image\r\n};\r\n\r\nconst ChatPage: React.FC<RouteComponentProps<RouteParams>> = ({ match }) => {\r\n  const [textMessage, setTextMessage] = useState('');\r\n  const [showTypingDots, setShowTypingDots] = useState(false);\r\n\r\n  const chatId = match.params.id;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const state = useSelector((state: RootStore) => state);\r\n\r\n  const loggedInUser = state.loggedInUserInfo.user!;\r\n\r\n  const chatDetailsState = state.chatDetails;\r\n  const { chat, loading, error } = chatDetailsState;\r\n\r\n  const chatUpdateState = state.chatUpdate;\r\n  const { success } = chatUpdateState;\r\n\r\n  const socketChatRoomState = state.socketChatRoom;\r\n  const { isTyping, room } = socketChatRoomState;\r\n\r\n  useEffect(() => {\r\n    dispatch(joinChatRoomSocket(chatId));\r\n    dispatch(chatActions.getChatDetails(chatId));\r\n\r\n    return () => {\r\n      dispatch({ type: SOCKET_CHAT_ROOM_TYPING_RESET });\r\n    };\r\n  }, [dispatch, chatId, success]);\r\n\r\n  const sendMessage = () => {\r\n    dispatch(messageActions.sendMessage(textMessage, chatId));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isTyping && chatId === room) {\r\n      setShowTypingDots(true);\r\n    } else if (isTyping === false && chatId === room) {\r\n      setShowTypingDots(false);\r\n    }\r\n  }, [isTyping, chatId, room]);\r\n\r\n  const messageSubmitHandler = () => {\r\n    const content = textMessage.trim();\r\n    if (content.length === 0) {\r\n      console.log('No message');\r\n      return;\r\n    }\r\n\r\n    sendMessage();\r\n    emitStopTypingSocket(chatId);\r\n    setTextMessage('');\r\n  };\r\n\r\n  const keyDownHandler = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n    updateTypingSocket(chatId);\r\n\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      messageSubmitHandler();\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  const messageTypingHandler = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setTextMessage(e.target.value);\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  } else if (error) {\r\n    return <p>{error}</p>;\r\n  } else if (!chat) {\r\n    return <p>No Chat Found</p>;\r\n  }\r\n\r\n  const images = getTitleBarImages(chat.users, loggedInUser);\r\n  const remainingImagesCount = getRemainingImagesCount(chat.users.length);\r\n\r\n  return (\r\n    <>\r\n      <Meta title={`Chat | ${getChatName(chat, loggedInUser._id)}`} />\r\n      <div className='chatPageContainer'>\r\n        <div className='chatTitleBarContianer'>\r\n          <div className='chatImagesContainer'>\r\n            {remainingImagesCount > 0 && (\r\n              <div className='userCount'>\r\n                <span>+{remainingImagesCount}</span>\r\n              </div>\r\n            )}\r\n            {images.map((src, i) => (\r\n              <img key={i} src={src} alt={'User' + i} />\r\n            ))}\r\n          </div>\r\n          <ChatNameModal chat={chat} />\r\n        </div>\r\n        <div className='mainContentContainer'>\r\n          <div className='chatContainer'>\r\n            <ChatBoxMessages chatId={chatId} />\r\n            {showTypingDots && (\r\n              <div className='typingDots'>\r\n                <img src='/images/dots.gif' alt='typing dots' />\r\n              </div>\r\n            )}\r\n\r\n            <div className='footer'>\r\n              <textarea\r\n                name='messageInput'\r\n                placeholder='Type a message...'\r\n                value={textMessage}\r\n                onChange={messageTypingHandler}\r\n                onKeyDown={keyDownHandler}\r\n              ></textarea>\r\n              <button\r\n                onClick={messageSubmitHandler}\r\n                className='sendMessageButton'\r\n              >\r\n                <i className='fas fa-paper-plane'></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Meta from '../../components/meta/Meta';\r\n\r\nimport NotificationList from '../../components/notification/NotificationList';\r\nimport TitleBar from '../../components/titleBar/TitleBar';\r\nimport * as notificationActions from '../../store/actions/notification/notificationActions';\r\nimport { RootStore } from '../../store/store';\r\n\r\nconst NotificationPage = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const state = useSelector((state: RootStore) => state);\r\n  const notificationListState = state.notificationList;\r\n  const { loading, error, notifications } = notificationListState;\r\n\r\n  useEffect(() => {\r\n    dispatch(notificationActions.listNotifications());\r\n  }, [dispatch]);\r\n\r\n  const markNotificationHandler = () => {\r\n    dispatch(notificationActions.markNotificationsAsOpened());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Meta title='Notifications | TweetHouse' />\r\n      <TitleBar\r\n        title='Notifications'\r\n        headerBtnIcon='fas fa-check-double'\r\n        onBtnClick={markNotificationHandler}\r\n      />\r\n      <NotificationList\r\n        loading={loading}\r\n        error={error}\r\n        notifications={notifications}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NotificationPage;\r\n","// Packages\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport pages from './pages';\r\n\r\nimport { RootStore } from '../store/store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport React, { useEffect } from 'react';\r\n\r\nimport * as userActions from '../store/actions/user/userActions';\r\nimport * as chatActions from '../store/actions/chat/chatActions';\r\nimport * as notificationActions from '../store/actions/notification/notificationActions';\r\nimport { setupSocket } from '../store/actions/socket/socketActions';\r\nimport { MESSAGE_MARK_AS_READ_RESET } from '../store/actions/message/messageActionTypes';\r\nimport { NOTIFICATION_MARK_AS_OPENED_RESET } from '../store/actions/notification/notificationActionTypes';\r\n\r\nconst Routes: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state: RootStore) => state);\r\n\r\n  const userAuthState = state.userAuth;\r\n  const { user } = userAuthState;\r\n\r\n  const notificationMarkState = state.notificationMark;\r\n  const { success } = notificationMarkState;\r\n\r\n  const messageMarkState = state.messageMark;\r\n  const { success: successMessageMark } = messageMarkState;\r\n\r\n  const isAuth = !!user;\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      dispatch(setupSocket(user));\r\n      dispatch(chatActions.listUnreadChats());\r\n      dispatch(notificationActions.listUnreadNotifications());\r\n    }\r\n    dispatch(userActions.getLoggedInUserInfo());\r\n  }, [dispatch, user]);\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      dispatch(notificationActions.listUnreadNotifications());\r\n      dispatch({ type: NOTIFICATION_MARK_AS_OPENED_RESET });\r\n    } else if (successMessageMark) {\r\n      dispatch(chatActions.listUnreadChats());\r\n      dispatch({ type: MESSAGE_MARK_AS_READ_RESET });\r\n    }\r\n  }, [success, successMessageMark, dispatch]);\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        {pages.map((page, index) => (\r\n          <Route\r\n            key={index}\r\n            exact={page.exact}\r\n            path={page.path}\r\n            render={(props) => {\r\n              const isPermitted = !page.protect || isAuth;\r\n              if (isPermitted) {\r\n                if (page.layout) {\r\n                  return (\r\n                    <page.layout\r\n                      history={props.history}\r\n                      pageTitle={page.pageTitle || null}\r\n                    >\r\n                      <page.component {...props} />\r\n                    </page.layout>\r\n                  );\r\n                } else {\r\n                  return <page.component {...props} />;\r\n                }\r\n              } else {\r\n                return (\r\n                  <Redirect\r\n                    to={{ pathname: '/login', state: { from: props.location } }}\r\n                  />\r\n                );\r\n              }\r\n            }}\r\n          />\r\n        ))}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","// Packages\nimport axios from 'axios';\n\nimport Routes from './routes/Routes';\n\nimport './sass/_main.scss';\n\naxios.defaults.withCredentials = true;\n\nconst App: React.FC = () => {\n  return <Routes />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store/store';\n\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}